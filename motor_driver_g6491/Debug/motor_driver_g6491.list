
motor_driver_g6491.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d18  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001ef0  08001ef0  00011ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f00  08001f00  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001f00  08001f00  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f00  08001f00  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f00  08001f00  00011f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f04  08001f04  00011f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  2000000c  08001f14  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08001f14  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000090e6  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c17  00000000  00000000  00029165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008a8  00000000  00000000  0002ad80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000666  00000000  00000000  0002b628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cbb0  00000000  00000000  0002bc8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009dc3  00000000  00000000  0004883e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b613d  00000000  00000000  00052601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000021a0  00000000  00000000  00108740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0010a8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08001ed8 	.word	0x08001ed8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08001ed8 	.word	0x08001ed8

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 f9f7 	bl	800060e <HAL_Init>

  /* USER CODE BEGIN Init */
  BitBangPWM_SetDutyCycle_1(50, 1000); // 50% duty cycle with a period of 1000 ms
 8000220:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000224:	2032      	movs	r0, #50	; 0x32
 8000226:	f000 f8fd 	bl	8000424 <BitBangPWM_SetDutyCycle_1>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f805 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f86d 	bl	800030c <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8000232:	f000 f843 	bl	80002bc <MX_USB_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000236:	e7fe      	b.n	8000236 <main+0x1e>

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b094      	sub	sp, #80	; 0x50
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0318 	add.w	r3, r7, #24
 8000242:	2238      	movs	r2, #56	; 0x38
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f001 fe1a 	bl	8001e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]
 8000258:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800025a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800025e:	f000 fdf7 	bl	8000e50 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000262:	2322      	movs	r3, #34	; 0x22
 8000264:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000266:	f44f 7380 	mov.w	r3, #256	; 0x100
 800026a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800026c:	2340      	movs	r3, #64	; 0x40
 800026e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000270:	2301      	movs	r3, #1
 8000272:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000274:	2300      	movs	r3, #0
 8000276:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000278:	f107 0318 	add.w	r3, r7, #24
 800027c:	4618      	mov	r0, r3
 800027e:	f000 fe8b 	bl	8000f98 <HAL_RCC_OscConfig>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000288:	f000 f8fe 	bl	8000488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028c:	230f      	movs	r3, #15
 800028e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000290:	2301      	movs	r3, #1
 8000292:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	2100      	movs	r1, #0
 80002a4:	4618      	mov	r0, r3
 80002a6:	f001 f98f 	bl	80015c8 <HAL_RCC_ClockConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80002b0:	f000 f8ea 	bl	8000488 <Error_Handler>
  }
}
 80002b4:	bf00      	nop
 80002b6:	3750      	adds	r7, #80	; 0x50
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}

080002bc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80002c0:	4b10      	ldr	r3, [pc, #64]	; (8000304 <MX_USB_PCD_Init+0x48>)
 80002c2:	4a11      	ldr	r2, [pc, #68]	; (8000308 <MX_USB_PCD_Init+0x4c>)
 80002c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80002c6:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <MX_USB_PCD_Init+0x48>)
 80002c8:	2208      	movs	r2, #8
 80002ca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80002cc:	4b0d      	ldr	r3, [pc, #52]	; (8000304 <MX_USB_PCD_Init+0x48>)
 80002ce:	2202      	movs	r2, #2
 80002d0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80002d2:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <MX_USB_PCD_Init+0x48>)
 80002d4:	2202      	movs	r2, #2
 80002d6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80002d8:	4b0a      	ldr	r3, [pc, #40]	; (8000304 <MX_USB_PCD_Init+0x48>)
 80002da:	2200      	movs	r2, #0
 80002dc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80002de:	4b09      	ldr	r3, [pc, #36]	; (8000304 <MX_USB_PCD_Init+0x48>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80002e4:	4b07      	ldr	r3, [pc, #28]	; (8000304 <MX_USB_PCD_Init+0x48>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80002ea:	4b06      	ldr	r3, [pc, #24]	; (8000304 <MX_USB_PCD_Init+0x48>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80002f0:	4804      	ldr	r0, [pc, #16]	; (8000304 <MX_USB_PCD_Init+0x48>)
 80002f2:	f000 fc9d 	bl	8000c30 <HAL_PCD_Init>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80002fc:	f000 f8c4 	bl	8000488 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000300:	bf00      	nop
 8000302:	bd80      	pop	{r7, pc}
 8000304:	20000028 	.word	0x20000028
 8000308:	40005c00 	.word	0x40005c00

0800030c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b08a      	sub	sp, #40	; 0x28
 8000310:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000312:	f107 0314 	add.w	r3, r7, #20
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	605a      	str	r2, [r3, #4]
 800031c:	609a      	str	r2, [r3, #8]
 800031e:	60da      	str	r2, [r3, #12]
 8000320:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000322:	4b37      	ldr	r3, [pc, #220]	; (8000400 <MX_GPIO_Init+0xf4>)
 8000324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000326:	4a36      	ldr	r2, [pc, #216]	; (8000400 <MX_GPIO_Init+0xf4>)
 8000328:	f043 0320 	orr.w	r3, r3, #32
 800032c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800032e:	4b34      	ldr	r3, [pc, #208]	; (8000400 <MX_GPIO_Init+0xf4>)
 8000330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000332:	f003 0320 	and.w	r3, r3, #32
 8000336:	613b      	str	r3, [r7, #16]
 8000338:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800033a:	4b31      	ldr	r3, [pc, #196]	; (8000400 <MX_GPIO_Init+0xf4>)
 800033c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800033e:	4a30      	ldr	r2, [pc, #192]	; (8000400 <MX_GPIO_Init+0xf4>)
 8000340:	f043 0301 	orr.w	r3, r3, #1
 8000344:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000346:	4b2e      	ldr	r3, [pc, #184]	; (8000400 <MX_GPIO_Init+0xf4>)
 8000348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800034a:	f003 0301 	and.w	r3, r3, #1
 800034e:	60fb      	str	r3, [r7, #12]
 8000350:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000352:	4b2b      	ldr	r3, [pc, #172]	; (8000400 <MX_GPIO_Init+0xf4>)
 8000354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000356:	4a2a      	ldr	r2, [pc, #168]	; (8000400 <MX_GPIO_Init+0xf4>)
 8000358:	f043 0304 	orr.w	r3, r3, #4
 800035c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800035e:	4b28      	ldr	r3, [pc, #160]	; (8000400 <MX_GPIO_Init+0xf4>)
 8000360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000362:	f003 0304 	and.w	r3, r3, #4
 8000366:	60bb      	str	r3, [r7, #8]
 8000368:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800036a:	4b25      	ldr	r3, [pc, #148]	; (8000400 <MX_GPIO_Init+0xf4>)
 800036c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800036e:	4a24      	ldr	r2, [pc, #144]	; (8000400 <MX_GPIO_Init+0xf4>)
 8000370:	f043 0302 	orr.w	r3, r3, #2
 8000374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000376:	4b22      	ldr	r3, [pc, #136]	; (8000400 <MX_GPIO_Init+0xf4>)
 8000378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800037a:	f003 0302 	and.w	r3, r3, #2
 800037e:	607b      	str	r3, [r7, #4]
 8000380:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000382:	2200      	movs	r2, #0
 8000384:	21f8      	movs	r1, #248	; 0xf8
 8000386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800038a:	f000 fc39 	bl	8000c00 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800038e:	2200      	movs	r2, #0
 8000390:	2130      	movs	r1, #48	; 0x30
 8000392:	481c      	ldr	r0, [pc, #112]	; (8000404 <MX_GPIO_Init+0xf8>)
 8000394:	f000 fc34 	bl	8000c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWM1_Pin|PWM2_Pin, GPIO_PIN_RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	2103      	movs	r1, #3
 800039c:	481a      	ldr	r0, [pc, #104]	; (8000408 <MX_GPIO_Init+0xfc>)
 800039e:	f000 fc2f 	bl	8000c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA4 PA5 PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80003a2:	23f8      	movs	r3, #248	; 0xf8
 80003a4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a6:	2301      	movs	r3, #1
 80003a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003aa:	2300      	movs	r3, #0
 80003ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ae:	2300      	movs	r3, #0
 80003b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003b2:	f107 0314 	add.w	r3, r7, #20
 80003b6:	4619      	mov	r1, r3
 80003b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003bc:	f000 fa9e 	bl	80008fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80003c0:	2330      	movs	r3, #48	; 0x30
 80003c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c4:	2301      	movs	r3, #1
 80003c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c8:	2300      	movs	r3, #0
 80003ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003cc:	2300      	movs	r3, #0
 80003ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003d0:	f107 0314 	add.w	r3, r7, #20
 80003d4:	4619      	mov	r1, r3
 80003d6:	480b      	ldr	r0, [pc, #44]	; (8000404 <MX_GPIO_Init+0xf8>)
 80003d8:	f000 fa90 	bl	80008fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PWM1_Pin PWM2_Pin */
  GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 80003dc:	2303      	movs	r3, #3
 80003de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e0:	2301      	movs	r3, #1
 80003e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e4:	2300      	movs	r3, #0
 80003e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e8:	2300      	movs	r3, #0
 80003ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ec:	f107 0314 	add.w	r3, r7, #20
 80003f0:	4619      	mov	r1, r3
 80003f2:	4805      	ldr	r0, [pc, #20]	; (8000408 <MX_GPIO_Init+0xfc>)
 80003f4:	f000 fa82 	bl	80008fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003f8:	bf00      	nop
 80003fa:	3728      	adds	r7, #40	; 0x28
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	40021000 	.word	0x40021000
 8000404:	48000800 	.word	0x48000800
 8000408:	48000400 	.word	0x48000400

0800040c <Delay>:

/* USER CODE BEGIN 4 */

void Delay(uint32_t ms)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 8000414:	6878      	ldr	r0, [r7, #4]
 8000416:	f000 f96b 	bl	80006f0 <HAL_Delay>
}
 800041a:	bf00      	nop
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
	...

08000424 <BitBangPWM_SetDutyCycle_1>:
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
}

void BitBangPWM_SetDutyCycle_1(uint16_t dutyCycle, uint16_t period)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b084      	sub	sp, #16
 8000428:	af00      	add	r7, sp, #0
 800042a:	4603      	mov	r3, r0
 800042c:	460a      	mov	r2, r1
 800042e:	80fb      	strh	r3, [r7, #6]
 8000430:	4613      	mov	r3, r2
 8000432:	80bb      	strh	r3, [r7, #4]
    if (dutyCycle <= 100)
 8000434:	88fb      	ldrh	r3, [r7, #6]
 8000436:	2b64      	cmp	r3, #100	; 0x64
 8000438:	d820      	bhi.n	800047c <BitBangPWM_SetDutyCycle_1+0x58>
    {
        uint16_t onTime = (dutyCycle * period) / 100;
 800043a:	88fb      	ldrh	r3, [r7, #6]
 800043c:	88ba      	ldrh	r2, [r7, #4]
 800043e:	fb02 f303 	mul.w	r3, r2, r3
 8000442:	4a10      	ldr	r2, [pc, #64]	; (8000484 <BitBangPWM_SetDutyCycle_1+0x60>)
 8000444:	fb82 1203 	smull	r1, r2, r2, r3
 8000448:	1152      	asrs	r2, r2, #5
 800044a:	17db      	asrs	r3, r3, #31
 800044c:	1ad3      	subs	r3, r2, r3
 800044e:	81fb      	strh	r3, [r7, #14]

        // Set the pin high for the on time
        HAL_GPIO_WritePin(GPIOA, PWM1_Pin, GPIO_PIN_SET);
 8000450:	2201      	movs	r2, #1
 8000452:	2101      	movs	r1, #1
 8000454:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000458:	f000 fbd2 	bl	8000c00 <HAL_GPIO_WritePin>
        Delay(onTime);
 800045c:	89fb      	ldrh	r3, [r7, #14]
 800045e:	4618      	mov	r0, r3
 8000460:	f7ff ffd4 	bl	800040c <Delay>

        // Set the pin low for the remaining time
        HAL_GPIO_WritePin(GPIOA, PWM2_Pin, GPIO_PIN_RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	2102      	movs	r1, #2
 8000468:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800046c:	f000 fbc8 	bl	8000c00 <HAL_GPIO_WritePin>
        Delay(period - onTime);
 8000470:	88ba      	ldrh	r2, [r7, #4]
 8000472:	89fb      	ldrh	r3, [r7, #14]
 8000474:	1ad3      	subs	r3, r2, r3
 8000476:	4618      	mov	r0, r3
 8000478:	f7ff ffc8 	bl	800040c <Delay>
    }
}
 800047c:	bf00      	nop
 800047e:	3710      	adds	r7, #16
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	51eb851f 	.word	0x51eb851f

08000488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800048c:	b672      	cpsid	i
}
 800048e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000490:	e7fe      	b.n	8000490 <Error_Handler+0x8>
	...

08000494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800049a:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <HAL_MspInit+0x44>)
 800049c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800049e:	4a0e      	ldr	r2, [pc, #56]	; (80004d8 <HAL_MspInit+0x44>)
 80004a0:	f043 0301 	orr.w	r3, r3, #1
 80004a4:	6613      	str	r3, [r2, #96]	; 0x60
 80004a6:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <HAL_MspInit+0x44>)
 80004a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004aa:	f003 0301 	and.w	r3, r3, #1
 80004ae:	607b      	str	r3, [r7, #4]
 80004b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b2:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <HAL_MspInit+0x44>)
 80004b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004b6:	4a08      	ldr	r2, [pc, #32]	; (80004d8 <HAL_MspInit+0x44>)
 80004b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004bc:	6593      	str	r3, [r2, #88]	; 0x58
 80004be:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <HAL_MspInit+0x44>)
 80004c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004c6:	603b      	str	r3, [r7, #0]
 80004c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ca:	bf00      	nop
 80004cc:	370c      	adds	r7, #12
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	40021000 	.word	0x40021000

080004dc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b098      	sub	sp, #96	; 0x60
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004e4:	f107 0310 	add.w	r3, r7, #16
 80004e8:	2250      	movs	r2, #80	; 0x50
 80004ea:	2100      	movs	r1, #0
 80004ec:	4618      	mov	r0, r3
 80004ee:	f001 fcc7 	bl	8001e80 <memset>
  if(hpcd->Instance==USB)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4a11      	ldr	r2, [pc, #68]	; (800053c <HAL_PCD_MspInit+0x60>)
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d11a      	bne.n	8000532 <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80004fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000500:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000502:	2300      	movs	r3, #0
 8000504:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000506:	f107 0310 	add.w	r3, r7, #16
 800050a:	4618      	mov	r0, r3
 800050c:	f001 fa40 	bl	8001990 <HAL_RCCEx_PeriphCLKConfig>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8000516:	f7ff ffb7 	bl	8000488 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800051a:	4b09      	ldr	r3, [pc, #36]	; (8000540 <HAL_PCD_MspInit+0x64>)
 800051c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800051e:	4a08      	ldr	r2, [pc, #32]	; (8000540 <HAL_PCD_MspInit+0x64>)
 8000520:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000524:	6593      	str	r3, [r2, #88]	; 0x58
 8000526:	4b06      	ldr	r3, [pc, #24]	; (8000540 <HAL_PCD_MspInit+0x64>)
 8000528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800052a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000532:	bf00      	nop
 8000534:	3760      	adds	r7, #96	; 0x60
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40005c00 	.word	0x40005c00
 8000540:	40021000 	.word	0x40021000

08000544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000548:	e7fe      	b.n	8000548 <NMI_Handler+0x4>

0800054a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800054a:	b480      	push	{r7}
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800054e:	e7fe      	b.n	800054e <HardFault_Handler+0x4>

08000550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000554:	e7fe      	b.n	8000554 <MemManage_Handler+0x4>

08000556 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000556:	b480      	push	{r7}
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800055a:	e7fe      	b.n	800055a <BusFault_Handler+0x4>

0800055c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000560:	e7fe      	b.n	8000560 <UsageFault_Handler+0x4>

08000562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000562:	b480      	push	{r7}
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000566:	bf00      	nop
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr

08000570 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr

0800057e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000590:	f000 f890 	bl	80006b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}

08000598 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <SystemInit+0x20>)
 800059e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005a2:	4a05      	ldr	r2, [pc, #20]	; (80005b8 <SystemInit+0x20>)
 80005a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	e000ed00 	.word	0xe000ed00

080005bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005bc:	480d      	ldr	r0, [pc, #52]	; (80005f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c0:	480d      	ldr	r0, [pc, #52]	; (80005f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005c2:	490e      	ldr	r1, [pc, #56]	; (80005fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80005c4:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <LoopForever+0xe>)
  movs r3, #0
 80005c6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80005c8:	e002      	b.n	80005d0 <LoopCopyDataInit>

080005ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ce:	3304      	adds	r3, #4

080005d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d4:	d3f9      	bcc.n	80005ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005d6:	4a0b      	ldr	r2, [pc, #44]	; (8000604 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d8:	4c0b      	ldr	r4, [pc, #44]	; (8000608 <LoopForever+0x16>)
  movs r3, #0
 80005da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005dc:	e001      	b.n	80005e2 <LoopFillZerobss>

080005de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e0:	3204      	adds	r2, #4

080005e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e4:	d3fb      	bcc.n	80005de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005e6:	f7ff ffd7 	bl	8000598 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ea:	f001 fc51 	bl	8001e90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005ee:	f7ff fe13 	bl	8000218 <main>

080005f2 <LoopForever>:

LoopForever:
    b LoopForever
 80005f2:	e7fe      	b.n	80005f2 <LoopForever>
  ldr   r0, =_estack
 80005f4:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80005f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000600:	08001f08 	.word	0x08001f08
  ldr r2, =_sbss
 8000604:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000608:	20000320 	.word	0x20000320

0800060c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800060c:	e7fe      	b.n	800060c <ADC1_2_IRQHandler>

0800060e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	b082      	sub	sp, #8
 8000612:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000614:	2300      	movs	r3, #0
 8000616:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000618:	2003      	movs	r0, #3
 800061a:	f000 f93d 	bl	8000898 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800061e:	200f      	movs	r0, #15
 8000620:	f000 f80e 	bl	8000640 <HAL_InitTick>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d002      	beq.n	8000630 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800062a:	2301      	movs	r3, #1
 800062c:	71fb      	strb	r3, [r7, #7]
 800062e:	e001      	b.n	8000634 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000630:	f7ff ff30 	bl	8000494 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000634:	79fb      	ldrb	r3, [r7, #7]

}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000648:	2300      	movs	r3, #0
 800064a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800064c:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <HAL_InitTick+0x68>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d022      	beq.n	800069a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000654:	4b15      	ldr	r3, [pc, #84]	; (80006ac <HAL_InitTick+0x6c>)
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <HAL_InitTick+0x68>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000660:	fbb1 f3f3 	udiv	r3, r1, r3
 8000664:	fbb2 f3f3 	udiv	r3, r2, r3
 8000668:	4618      	mov	r0, r3
 800066a:	f000 f93a 	bl	80008e2 <HAL_SYSTICK_Config>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d10f      	bne.n	8000694 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2b0f      	cmp	r3, #15
 8000678:	d809      	bhi.n	800068e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800067a:	2200      	movs	r2, #0
 800067c:	6879      	ldr	r1, [r7, #4]
 800067e:	f04f 30ff 	mov.w	r0, #4294967295
 8000682:	f000 f914 	bl	80008ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000686:	4a0a      	ldr	r2, [pc, #40]	; (80006b0 <HAL_InitTick+0x70>)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	e007      	b.n	800069e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800068e:	2301      	movs	r3, #1
 8000690:	73fb      	strb	r3, [r7, #15]
 8000692:	e004      	b.n	800069e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000694:	2301      	movs	r3, #1
 8000696:	73fb      	strb	r3, [r7, #15]
 8000698:	e001      	b.n	800069e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800069a:	2301      	movs	r3, #1
 800069c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800069e:	7bfb      	ldrb	r3, [r7, #15]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000008 	.word	0x20000008
 80006ac:	20000000 	.word	0x20000000
 80006b0:	20000004 	.word	0x20000004

080006b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006b8:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <HAL_IncTick+0x1c>)
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <HAL_IncTick+0x20>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4413      	add	r3, r2
 80006c2:	4a03      	ldr	r2, [pc, #12]	; (80006d0 <HAL_IncTick+0x1c>)
 80006c4:	6013      	str	r3, [r2, #0]
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	2000031c 	.word	0x2000031c
 80006d4:	20000008 	.word	0x20000008

080006d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  return uwTick;
 80006dc:	4b03      	ldr	r3, [pc, #12]	; (80006ec <HAL_GetTick+0x14>)
 80006de:	681b      	ldr	r3, [r3, #0]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	2000031c 	.word	0x2000031c

080006f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006f8:	f7ff ffee 	bl	80006d8 <HAL_GetTick>
 80006fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000708:	d004      	beq.n	8000714 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <HAL_Delay+0x40>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	68fa      	ldr	r2, [r7, #12]
 8000710:	4413      	add	r3, r2
 8000712:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000714:	bf00      	nop
 8000716:	f7ff ffdf 	bl	80006d8 <HAL_GetTick>
 800071a:	4602      	mov	r2, r0
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	1ad3      	subs	r3, r2, r3
 8000720:	68fa      	ldr	r2, [r7, #12]
 8000722:	429a      	cmp	r2, r3
 8000724:	d8f7      	bhi.n	8000716 <HAL_Delay+0x26>
  {
  }
}
 8000726:	bf00      	nop
 8000728:	bf00      	nop
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000008 	.word	0x20000008

08000734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f003 0307 	and.w	r3, r3, #7
 8000742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <__NVIC_SetPriorityGrouping+0x44>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800074a:	68ba      	ldr	r2, [r7, #8]
 800074c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000750:	4013      	ands	r3, r2
 8000752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800075c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000766:	4a04      	ldr	r2, [pc, #16]	; (8000778 <__NVIC_SetPriorityGrouping+0x44>)
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	60d3      	str	r3, [r2, #12]
}
 800076c:	bf00      	nop
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <__NVIC_GetPriorityGrouping+0x18>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	0a1b      	lsrs	r3, r3, #8
 8000786:	f003 0307 	and.w	r3, r3, #7
}
 800078a:	4618      	mov	r0, r3
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	e000ed00 	.word	0xe000ed00

08000798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	6039      	str	r1, [r7, #0]
 80007a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	db0a      	blt.n	80007c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	490c      	ldr	r1, [pc, #48]	; (80007e4 <__NVIC_SetPriority+0x4c>)
 80007b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b6:	0112      	lsls	r2, r2, #4
 80007b8:	b2d2      	uxtb	r2, r2
 80007ba:	440b      	add	r3, r1
 80007bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007c0:	e00a      	b.n	80007d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	4908      	ldr	r1, [pc, #32]	; (80007e8 <__NVIC_SetPriority+0x50>)
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	f003 030f 	and.w	r3, r3, #15
 80007ce:	3b04      	subs	r3, #4
 80007d0:	0112      	lsls	r2, r2, #4
 80007d2:	b2d2      	uxtb	r2, r2
 80007d4:	440b      	add	r3, r1
 80007d6:	761a      	strb	r2, [r3, #24]
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	e000e100 	.word	0xe000e100
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b089      	sub	sp, #36	; 0x24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	f003 0307 	and.w	r3, r3, #7
 80007fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000800:	69fb      	ldr	r3, [r7, #28]
 8000802:	f1c3 0307 	rsb	r3, r3, #7
 8000806:	2b04      	cmp	r3, #4
 8000808:	bf28      	it	cs
 800080a:	2304      	movcs	r3, #4
 800080c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	3304      	adds	r3, #4
 8000812:	2b06      	cmp	r3, #6
 8000814:	d902      	bls.n	800081c <NVIC_EncodePriority+0x30>
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	3b03      	subs	r3, #3
 800081a:	e000      	b.n	800081e <NVIC_EncodePriority+0x32>
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000820:	f04f 32ff 	mov.w	r2, #4294967295
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	43da      	mvns	r2, r3
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	401a      	ands	r2, r3
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000834:	f04f 31ff 	mov.w	r1, #4294967295
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	fa01 f303 	lsl.w	r3, r1, r3
 800083e:	43d9      	mvns	r1, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000844:	4313      	orrs	r3, r2
         );
}
 8000846:	4618      	mov	r0, r3
 8000848:	3724      	adds	r7, #36	; 0x24
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
	...

08000854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3b01      	subs	r3, #1
 8000860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000864:	d301      	bcc.n	800086a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000866:	2301      	movs	r3, #1
 8000868:	e00f      	b.n	800088a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800086a:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <SysTick_Config+0x40>)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3b01      	subs	r3, #1
 8000870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000872:	210f      	movs	r1, #15
 8000874:	f04f 30ff 	mov.w	r0, #4294967295
 8000878:	f7ff ff8e 	bl	8000798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800087c:	4b05      	ldr	r3, [pc, #20]	; (8000894 <SysTick_Config+0x40>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000882:	4b04      	ldr	r3, [pc, #16]	; (8000894 <SysTick_Config+0x40>)
 8000884:	2207      	movs	r2, #7
 8000886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	e000e010 	.word	0xe000e010

08000898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f7ff ff47 	bl	8000734 <__NVIC_SetPriorityGrouping>
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b086      	sub	sp, #24
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	4603      	mov	r3, r0
 80008b6:	60b9      	str	r1, [r7, #8]
 80008b8:	607a      	str	r2, [r7, #4]
 80008ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008bc:	f7ff ff5e 	bl	800077c <__NVIC_GetPriorityGrouping>
 80008c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	68b9      	ldr	r1, [r7, #8]
 80008c6:	6978      	ldr	r0, [r7, #20]
 80008c8:	f7ff ff90 	bl	80007ec <NVIC_EncodePriority>
 80008cc:	4602      	mov	r2, r0
 80008ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008d2:	4611      	mov	r1, r2
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff ff5f 	bl	8000798 <__NVIC_SetPriority>
}
 80008da:	bf00      	nop
 80008dc:	3718      	adds	r7, #24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b082      	sub	sp, #8
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f7ff ffb2 	bl	8000854 <SysTick_Config>
 80008f0:	4603      	mov	r3, r0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b087      	sub	sp, #28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800090a:	e15a      	b.n	8000bc2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	2101      	movs	r1, #1
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	fa01 f303 	lsl.w	r3, r1, r3
 8000918:	4013      	ands	r3, r2
 800091a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	2b00      	cmp	r3, #0
 8000920:	f000 814c 	beq.w	8000bbc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	f003 0303 	and.w	r3, r3, #3
 800092c:	2b01      	cmp	r3, #1
 800092e:	d005      	beq.n	800093c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000938:	2b02      	cmp	r3, #2
 800093a:	d130      	bne.n	800099e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	2203      	movs	r2, #3
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	43db      	mvns	r3, r3
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	4013      	ands	r3, r2
 8000952:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	68da      	ldr	r2, [r3, #12]
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	693a      	ldr	r2, [r7, #16]
 8000962:	4313      	orrs	r3, r2
 8000964:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	693a      	ldr	r2, [r7, #16]
 800096a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000972:	2201      	movs	r2, #1
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	43db      	mvns	r3, r3
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	4013      	ands	r3, r2
 8000980:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	091b      	lsrs	r3, r3, #4
 8000988:	f003 0201 	and.w	r2, r3, #1
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	4313      	orrs	r3, r2
 8000996:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	f003 0303 	and.w	r3, r3, #3
 80009a6:	2b03      	cmp	r3, #3
 80009a8:	d017      	beq.n	80009da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	68db      	ldr	r3, [r3, #12]
 80009ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	2203      	movs	r2, #3
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	43db      	mvns	r3, r3
 80009bc:	693a      	ldr	r2, [r7, #16]
 80009be:	4013      	ands	r3, r2
 80009c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	689a      	ldr	r2, [r3, #8]
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	f003 0303 	and.w	r3, r3, #3
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	d123      	bne.n	8000a2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	08da      	lsrs	r2, r3, #3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3208      	adds	r2, #8
 80009ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	220f      	movs	r2, #15
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	43db      	mvns	r3, r3
 8000a04:	693a      	ldr	r2, [r7, #16]
 8000a06:	4013      	ands	r3, r2
 8000a08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	691a      	ldr	r2, [r3, #16]
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	f003 0307 	and.w	r3, r3, #7
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	08da      	lsrs	r2, r3, #3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3208      	adds	r2, #8
 8000a28:	6939      	ldr	r1, [r7, #16]
 8000a2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	2203      	movs	r2, #3
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	43db      	mvns	r3, r3
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	4013      	ands	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	f003 0203 	and.w	r2, r3, #3
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f000 80a6 	beq.w	8000bbc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a70:	4b5b      	ldr	r3, [pc, #364]	; (8000be0 <HAL_GPIO_Init+0x2e4>)
 8000a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a74:	4a5a      	ldr	r2, [pc, #360]	; (8000be0 <HAL_GPIO_Init+0x2e4>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	6613      	str	r3, [r2, #96]	; 0x60
 8000a7c:	4b58      	ldr	r3, [pc, #352]	; (8000be0 <HAL_GPIO_Init+0x2e4>)
 8000a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a80:	f003 0301 	and.w	r3, r3, #1
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a88:	4a56      	ldr	r2, [pc, #344]	; (8000be4 <HAL_GPIO_Init+0x2e8>)
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	089b      	lsrs	r3, r3, #2
 8000a8e:	3302      	adds	r3, #2
 8000a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	f003 0303 	and.w	r3, r3, #3
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	220f      	movs	r2, #15
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ab2:	d01f      	beq.n	8000af4 <HAL_GPIO_Init+0x1f8>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4a4c      	ldr	r2, [pc, #304]	; (8000be8 <HAL_GPIO_Init+0x2ec>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d019      	beq.n	8000af0 <HAL_GPIO_Init+0x1f4>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a4b      	ldr	r2, [pc, #300]	; (8000bec <HAL_GPIO_Init+0x2f0>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d013      	beq.n	8000aec <HAL_GPIO_Init+0x1f0>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a4a      	ldr	r2, [pc, #296]	; (8000bf0 <HAL_GPIO_Init+0x2f4>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d00d      	beq.n	8000ae8 <HAL_GPIO_Init+0x1ec>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a49      	ldr	r2, [pc, #292]	; (8000bf4 <HAL_GPIO_Init+0x2f8>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d007      	beq.n	8000ae4 <HAL_GPIO_Init+0x1e8>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a48      	ldr	r2, [pc, #288]	; (8000bf8 <HAL_GPIO_Init+0x2fc>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d101      	bne.n	8000ae0 <HAL_GPIO_Init+0x1e4>
 8000adc:	2305      	movs	r3, #5
 8000ade:	e00a      	b.n	8000af6 <HAL_GPIO_Init+0x1fa>
 8000ae0:	2306      	movs	r3, #6
 8000ae2:	e008      	b.n	8000af6 <HAL_GPIO_Init+0x1fa>
 8000ae4:	2304      	movs	r3, #4
 8000ae6:	e006      	b.n	8000af6 <HAL_GPIO_Init+0x1fa>
 8000ae8:	2303      	movs	r3, #3
 8000aea:	e004      	b.n	8000af6 <HAL_GPIO_Init+0x1fa>
 8000aec:	2302      	movs	r3, #2
 8000aee:	e002      	b.n	8000af6 <HAL_GPIO_Init+0x1fa>
 8000af0:	2301      	movs	r3, #1
 8000af2:	e000      	b.n	8000af6 <HAL_GPIO_Init+0x1fa>
 8000af4:	2300      	movs	r3, #0
 8000af6:	697a      	ldr	r2, [r7, #20]
 8000af8:	f002 0203 	and.w	r2, r2, #3
 8000afc:	0092      	lsls	r2, r2, #2
 8000afe:	4093      	lsls	r3, r2
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b06:	4937      	ldr	r1, [pc, #220]	; (8000be4 <HAL_GPIO_Init+0x2e8>)
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	089b      	lsrs	r3, r3, #2
 8000b0c:	3302      	adds	r3, #2
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b14:	4b39      	ldr	r3, [pc, #228]	; (8000bfc <HAL_GPIO_Init+0x300>)
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4013      	ands	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d003      	beq.n	8000b38 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b38:	4a30      	ldr	r2, [pc, #192]	; (8000bfc <HAL_GPIO_Init+0x300>)
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b3e:	4b2f      	ldr	r3, [pc, #188]	; (8000bfc <HAL_GPIO_Init+0x300>)
 8000b40:	68db      	ldr	r3, [r3, #12]
 8000b42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	43db      	mvns	r3, r3
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d003      	beq.n	8000b62 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b62:	4a26      	ldr	r2, [pc, #152]	; (8000bfc <HAL_GPIO_Init+0x300>)
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000b68:	4b24      	ldr	r3, [pc, #144]	; (8000bfc <HAL_GPIO_Init+0x300>)
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	43db      	mvns	r3, r3
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	4013      	ands	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d003      	beq.n	8000b8c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b8c:	4a1b      	ldr	r2, [pc, #108]	; (8000bfc <HAL_GPIO_Init+0x300>)
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b92:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <HAL_GPIO_Init+0x300>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d003      	beq.n	8000bb6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000bb6:	4a11      	ldr	r2, [pc, #68]	; (8000bfc <HAL_GPIO_Init+0x300>)
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	f47f ae9d 	bne.w	800090c <HAL_GPIO_Init+0x10>
  }
}
 8000bd2:	bf00      	nop
 8000bd4:	bf00      	nop
 8000bd6:	371c      	adds	r7, #28
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	40021000 	.word	0x40021000
 8000be4:	40010000 	.word	0x40010000
 8000be8:	48000400 	.word	0x48000400
 8000bec:	48000800 	.word	0x48000800
 8000bf0:	48000c00 	.word	0x48000c00
 8000bf4:	48001000 	.word	0x48001000
 8000bf8:	48001400 	.word	0x48001400
 8000bfc:	40010400 	.word	0x40010400

08000c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	807b      	strh	r3, [r7, #2]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c10:	787b      	ldrb	r3, [r7, #1]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d003      	beq.n	8000c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c16:	887a      	ldrh	r2, [r7, #2]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c1c:	e002      	b.n	8000c24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c1e:	887a      	ldrh	r2, [r7, #2]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c32:	b08b      	sub	sp, #44	; 0x2c
 8000c34:	af06      	add	r7, sp, #24
 8000c36:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d101      	bne.n	8000c42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e0d7      	b.n	8000df2 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d106      	bne.n	8000c5c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2200      	movs	r2, #0
 8000c52:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff fc40 	bl	80004dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2203      	movs	r2, #3
 8000c60:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f001 f8cd 	bl	8001e08 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c6e:	2300      	movs	r3, #0
 8000c70:	73fb      	strb	r3, [r7, #15]
 8000c72:	e04c      	b.n	8000d0e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	1c5a      	adds	r2, r3, #1
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	4413      	add	r3, r2
 8000c80:	00db      	lsls	r3, r3, #3
 8000c82:	440b      	add	r3, r1
 8000c84:	3301      	adds	r3, #1
 8000c86:	2201      	movs	r2, #1
 8000c88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]
 8000c8c:	6879      	ldr	r1, [r7, #4]
 8000c8e:	1c5a      	adds	r2, r3, #1
 8000c90:	4613      	mov	r3, r2
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	4413      	add	r3, r2
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	440b      	add	r3, r1
 8000c9a:	7bfa      	ldrb	r2, [r7, #15]
 8000c9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000c9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
 8000ca2:	b298      	uxth	r0, r3
 8000ca4:	6879      	ldr	r1, [r7, #4]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	4413      	add	r3, r2
 8000cac:	00db      	lsls	r3, r3, #3
 8000cae:	440b      	add	r3, r1
 8000cb0:	3336      	adds	r3, #54	; 0x36
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
 8000cb8:	6879      	ldr	r1, [r7, #4]
 8000cba:	1c5a      	adds	r2, r3, #1
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	4413      	add	r3, r2
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	440b      	add	r3, r1
 8000cc6:	3303      	adds	r3, #3
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ccc:	7bfa      	ldrb	r2, [r7, #15]
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4413      	add	r3, r2
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	440b      	add	r3, r1
 8000cda:	3338      	adds	r3, #56	; 0x38
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ce0:	7bfa      	ldrb	r2, [r7, #15]
 8000ce2:	6879      	ldr	r1, [r7, #4]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	4413      	add	r3, r2
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	440b      	add	r3, r1
 8000cee:	333c      	adds	r3, #60	; 0x3c
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000cf4:	7bfa      	ldrb	r2, [r7, #15]
 8000cf6:	6879      	ldr	r1, [r7, #4]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	4413      	add	r3, r2
 8000cfe:	00db      	lsls	r3, r3, #3
 8000d00:	440b      	add	r3, r1
 8000d02:	3340      	adds	r3, #64	; 0x40
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d08:	7bfb      	ldrb	r3, [r7, #15]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	73fb      	strb	r3, [r7, #15]
 8000d0e:	7bfa      	ldrb	r2, [r7, #15]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d3ad      	bcc.n	8000c74 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d18:	2300      	movs	r3, #0
 8000d1a:	73fb      	strb	r3, [r7, #15]
 8000d1c:	e044      	b.n	8000da8 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d1e:	7bfa      	ldrb	r2, [r7, #15]
 8000d20:	6879      	ldr	r1, [r7, #4]
 8000d22:	4613      	mov	r3, r2
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	4413      	add	r3, r2
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	440b      	add	r3, r1
 8000d2c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d34:	7bfa      	ldrb	r2, [r7, #15]
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	4413      	add	r3, r2
 8000d3e:	00db      	lsls	r3, r3, #3
 8000d40:	440b      	add	r3, r1
 8000d42:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000d46:	7bfa      	ldrb	r2, [r7, #15]
 8000d48:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d4a:	7bfa      	ldrb	r2, [r7, #15]
 8000d4c:	6879      	ldr	r1, [r7, #4]
 8000d4e:	4613      	mov	r3, r2
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	4413      	add	r3, r2
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	440b      	add	r3, r1
 8000d58:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d60:	7bfa      	ldrb	r2, [r7, #15]
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	4613      	mov	r3, r2
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	4413      	add	r3, r2
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	440b      	add	r3, r1
 8000d6e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d76:	7bfa      	ldrb	r2, [r7, #15]
 8000d78:	6879      	ldr	r1, [r7, #4]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	4413      	add	r3, r2
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	440b      	add	r3, r1
 8000d84:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d8c:	7bfa      	ldrb	r2, [r7, #15]
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	4613      	mov	r3, r2
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	4413      	add	r3, r2
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	440b      	add	r3, r1
 8000d9a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	3301      	adds	r3, #1
 8000da6:	73fb      	strb	r3, [r7, #15]
 8000da8:	7bfa      	ldrb	r2, [r7, #15]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d3b5      	bcc.n	8000d1e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	687e      	ldr	r6, [r7, #4]
 8000dba:	466d      	mov	r5, sp
 8000dbc:	f106 0410 	add.w	r4, r6, #16
 8000dc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dc4:	6823      	ldr	r3, [r4, #0]
 8000dc6:	602b      	str	r3, [r5, #0]
 8000dc8:	1d33      	adds	r3, r6, #4
 8000dca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dcc:	6838      	ldr	r0, [r7, #0]
 8000dce:	f001 f836 	bl	8001e3e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2201      	movs	r2, #1
 8000dde:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	69db      	ldr	r3, [r3, #28]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d102      	bne.n	8000df0 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f000 f805 	bl	8000dfa <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3714      	adds	r7, #20
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000dfa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b085      	sub	sp, #20
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	b29a      	uxth	r2, r3
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	f043 0302 	orr.w	r3, r3, #2
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
	...

08000e50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d141      	bne.n	8000ee2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e5e:	4b4b      	ldr	r3, [pc, #300]	; (8000f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e6a:	d131      	bne.n	8000ed0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e6c:	4b47      	ldr	r3, [pc, #284]	; (8000f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e72:	4a46      	ldr	r2, [pc, #280]	; (8000f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e7c:	4b43      	ldr	r3, [pc, #268]	; (8000f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e84:	4a41      	ldr	r2, [pc, #260]	; (8000f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e8c:	4b40      	ldr	r3, [pc, #256]	; (8000f90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2232      	movs	r2, #50	; 0x32
 8000e92:	fb02 f303 	mul.w	r3, r2, r3
 8000e96:	4a3f      	ldr	r2, [pc, #252]	; (8000f94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000e98:	fba2 2303 	umull	r2, r3, r2, r3
 8000e9c:	0c9b      	lsrs	r3, r3, #18
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ea2:	e002      	b.n	8000eaa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000eaa:	4b38      	ldr	r3, [pc, #224]	; (8000f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eb6:	d102      	bne.n	8000ebe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d1f2      	bne.n	8000ea4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ebe:	4b33      	ldr	r3, [pc, #204]	; (8000f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eca:	d158      	bne.n	8000f7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	e057      	b.n	8000f80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ed0:	4b2e      	ldr	r3, [pc, #184]	; (8000f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ed6:	4a2d      	ldr	r2, [pc, #180]	; (8000f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000edc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000ee0:	e04d      	b.n	8000f7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ee8:	d141      	bne.n	8000f6e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000eea:	4b28      	ldr	r3, [pc, #160]	; (8000f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ef6:	d131      	bne.n	8000f5c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ef8:	4b24      	ldr	r3, [pc, #144]	; (8000f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000efe:	4a23      	ldr	r2, [pc, #140]	; (8000f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f08:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f10:	4a1e      	ldr	r2, [pc, #120]	; (8000f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f18:	4b1d      	ldr	r3, [pc, #116]	; (8000f90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2232      	movs	r2, #50	; 0x32
 8000f1e:	fb02 f303 	mul.w	r3, r2, r3
 8000f22:	4a1c      	ldr	r2, [pc, #112]	; (8000f94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000f24:	fba2 2303 	umull	r2, r3, r2, r3
 8000f28:	0c9b      	lsrs	r3, r3, #18
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f2e:	e002      	b.n	8000f36 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f42:	d102      	bne.n	8000f4a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d1f2      	bne.n	8000f30 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f56:	d112      	bne.n	8000f7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e011      	b.n	8000f80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000f6c:	e007      	b.n	8000f7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f6e:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f76:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f7c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000f7e:	2300      	movs	r3, #0
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	40007000 	.word	0x40007000
 8000f90:	20000000 	.word	0x20000000
 8000f94:	431bde83 	.word	0x431bde83

08000f98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d101      	bne.n	8000faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e306      	b.n	80015b8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d075      	beq.n	80010a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fb6:	4b97      	ldr	r3, [pc, #604]	; (8001214 <HAL_RCC_OscConfig+0x27c>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f003 030c 	and.w	r3, r3, #12
 8000fbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fc0:	4b94      	ldr	r3, [pc, #592]	; (8001214 <HAL_RCC_OscConfig+0x27c>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	f003 0303 	and.w	r3, r3, #3
 8000fc8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	2b0c      	cmp	r3, #12
 8000fce:	d102      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x3e>
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d002      	beq.n	8000fdc <HAL_RCC_OscConfig+0x44>
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	2b08      	cmp	r3, #8
 8000fda:	d10b      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fdc:	4b8d      	ldr	r3, [pc, #564]	; (8001214 <HAL_RCC_OscConfig+0x27c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d05b      	beq.n	80010a0 <HAL_RCC_OscConfig+0x108>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d157      	bne.n	80010a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e2e1      	b.n	80015b8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ffc:	d106      	bne.n	800100c <HAL_RCC_OscConfig+0x74>
 8000ffe:	4b85      	ldr	r3, [pc, #532]	; (8001214 <HAL_RCC_OscConfig+0x27c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a84      	ldr	r2, [pc, #528]	; (8001214 <HAL_RCC_OscConfig+0x27c>)
 8001004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001008:	6013      	str	r3, [r2, #0]
 800100a:	e01d      	b.n	8001048 <HAL_RCC_OscConfig+0xb0>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001014:	d10c      	bne.n	8001030 <HAL_RCC_OscConfig+0x98>
 8001016:	4b7f      	ldr	r3, [pc, #508]	; (8001214 <HAL_RCC_OscConfig+0x27c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a7e      	ldr	r2, [pc, #504]	; (8001214 <HAL_RCC_OscConfig+0x27c>)
 800101c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	4b7c      	ldr	r3, [pc, #496]	; (8001214 <HAL_RCC_OscConfig+0x27c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a7b      	ldr	r2, [pc, #492]	; (8001214 <HAL_RCC_OscConfig+0x27c>)
 8001028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	e00b      	b.n	8001048 <HAL_RCC_OscConfig+0xb0>
 8001030:	4b78      	ldr	r3, [pc, #480]	; (8001214 <HAL_RCC_OscConfig+0x27c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a77      	ldr	r2, [pc, #476]	; (8001214 <HAL_RCC_OscConfig+0x27c>)
 8001036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	4b75      	ldr	r3, [pc, #468]	; (8001214 <HAL_RCC_OscConfig+0x27c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a74      	ldr	r2, [pc, #464]	; (8001214 <HAL_RCC_OscConfig+0x27c>)
 8001042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d013      	beq.n	8001078 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001050:	f7ff fb42 	bl	80006d8 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001058:	f7ff fb3e 	bl	80006d8 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b64      	cmp	r3, #100	; 0x64
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e2a6      	b.n	80015b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800106a:	4b6a      	ldr	r3, [pc, #424]	; (8001214 <HAL_RCC_OscConfig+0x27c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d0f0      	beq.n	8001058 <HAL_RCC_OscConfig+0xc0>
 8001076:	e014      	b.n	80010a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001078:	f7ff fb2e 	bl	80006d8 <HAL_GetTick>
 800107c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800107e:	e008      	b.n	8001092 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001080:	f7ff fb2a 	bl	80006d8 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b64      	cmp	r3, #100	; 0x64
 800108c:	d901      	bls.n	8001092 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e292      	b.n	80015b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001092:	4b60      	ldr	r3, [pc, #384]	; (8001214 <HAL_RCC_OscConfig+0x27c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f0      	bne.n	8001080 <HAL_RCC_OscConfig+0xe8>
 800109e:	e000      	b.n	80010a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d075      	beq.n	800119a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010ae:	4b59      	ldr	r3, [pc, #356]	; (8001214 <HAL_RCC_OscConfig+0x27c>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	f003 030c 	and.w	r3, r3, #12
 80010b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010b8:	4b56      	ldr	r3, [pc, #344]	; (8001214 <HAL_RCC_OscConfig+0x27c>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	2b0c      	cmp	r3, #12
 80010c6:	d102      	bne.n	80010ce <HAL_RCC_OscConfig+0x136>
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d002      	beq.n	80010d4 <HAL_RCC_OscConfig+0x13c>
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	2b04      	cmp	r3, #4
 80010d2:	d11f      	bne.n	8001114 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010d4:	4b4f      	ldr	r3, [pc, #316]	; (8001214 <HAL_RCC_OscConfig+0x27c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d005      	beq.n	80010ec <HAL_RCC_OscConfig+0x154>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e265      	b.n	80015b8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ec:	4b49      	ldr	r3, [pc, #292]	; (8001214 <HAL_RCC_OscConfig+0x27c>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	691b      	ldr	r3, [r3, #16]
 80010f8:	061b      	lsls	r3, r3, #24
 80010fa:	4946      	ldr	r1, [pc, #280]	; (8001214 <HAL_RCC_OscConfig+0x27c>)
 80010fc:	4313      	orrs	r3, r2
 80010fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001100:	4b45      	ldr	r3, [pc, #276]	; (8001218 <HAL_RCC_OscConfig+0x280>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fa9b 	bl	8000640 <HAL_InitTick>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d043      	beq.n	8001198 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e251      	b.n	80015b8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d023      	beq.n	8001164 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800111c:	4b3d      	ldr	r3, [pc, #244]	; (8001214 <HAL_RCC_OscConfig+0x27c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a3c      	ldr	r2, [pc, #240]	; (8001214 <HAL_RCC_OscConfig+0x27c>)
 8001122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001126:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001128:	f7ff fad6 	bl	80006d8 <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001130:	f7ff fad2 	bl	80006d8 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e23a      	b.n	80015b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001142:	4b34      	ldr	r3, [pc, #208]	; (8001214 <HAL_RCC_OscConfig+0x27c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0f0      	beq.n	8001130 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800114e:	4b31      	ldr	r3, [pc, #196]	; (8001214 <HAL_RCC_OscConfig+0x27c>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	691b      	ldr	r3, [r3, #16]
 800115a:	061b      	lsls	r3, r3, #24
 800115c:	492d      	ldr	r1, [pc, #180]	; (8001214 <HAL_RCC_OscConfig+0x27c>)
 800115e:	4313      	orrs	r3, r2
 8001160:	604b      	str	r3, [r1, #4]
 8001162:	e01a      	b.n	800119a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001164:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <HAL_RCC_OscConfig+0x27c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a2a      	ldr	r2, [pc, #168]	; (8001214 <HAL_RCC_OscConfig+0x27c>)
 800116a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800116e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001170:	f7ff fab2 	bl	80006d8 <HAL_GetTick>
 8001174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001176:	e008      	b.n	800118a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001178:	f7ff faae 	bl	80006d8 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b02      	cmp	r3, #2
 8001184:	d901      	bls.n	800118a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e216      	b.n	80015b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800118a:	4b22      	ldr	r3, [pc, #136]	; (8001214 <HAL_RCC_OscConfig+0x27c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1f0      	bne.n	8001178 <HAL_RCC_OscConfig+0x1e0>
 8001196:	e000      	b.n	800119a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001198:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0308 	and.w	r3, r3, #8
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d041      	beq.n	800122a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d01c      	beq.n	80011e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ae:	4b19      	ldr	r3, [pc, #100]	; (8001214 <HAL_RCC_OscConfig+0x27c>)
 80011b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011b4:	4a17      	ldr	r2, [pc, #92]	; (8001214 <HAL_RCC_OscConfig+0x27c>)
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011be:	f7ff fa8b 	bl	80006d8 <HAL_GetTick>
 80011c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011c4:	e008      	b.n	80011d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011c6:	f7ff fa87 	bl	80006d8 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d901      	bls.n	80011d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e1ef      	b.n	80015b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011d8:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <HAL_RCC_OscConfig+0x27c>)
 80011da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0ef      	beq.n	80011c6 <HAL_RCC_OscConfig+0x22e>
 80011e6:	e020      	b.n	800122a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011e8:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <HAL_RCC_OscConfig+0x27c>)
 80011ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011ee:	4a09      	ldr	r2, [pc, #36]	; (8001214 <HAL_RCC_OscConfig+0x27c>)
 80011f0:	f023 0301 	bic.w	r3, r3, #1
 80011f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f8:	f7ff fa6e 	bl	80006d8 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011fe:	e00d      	b.n	800121c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001200:	f7ff fa6a 	bl	80006d8 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d906      	bls.n	800121c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e1d2      	b.n	80015b8 <HAL_RCC_OscConfig+0x620>
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000
 8001218:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800121c:	4b8c      	ldr	r3, [pc, #560]	; (8001450 <HAL_RCC_OscConfig+0x4b8>)
 800121e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1ea      	bne.n	8001200 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	2b00      	cmp	r3, #0
 8001234:	f000 80a6 	beq.w	8001384 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001238:	2300      	movs	r3, #0
 800123a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800123c:	4b84      	ldr	r3, [pc, #528]	; (8001450 <HAL_RCC_OscConfig+0x4b8>)
 800123e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d101      	bne.n	800124c <HAL_RCC_OscConfig+0x2b4>
 8001248:	2301      	movs	r3, #1
 800124a:	e000      	b.n	800124e <HAL_RCC_OscConfig+0x2b6>
 800124c:	2300      	movs	r3, #0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d00d      	beq.n	800126e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001252:	4b7f      	ldr	r3, [pc, #508]	; (8001450 <HAL_RCC_OscConfig+0x4b8>)
 8001254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001256:	4a7e      	ldr	r2, [pc, #504]	; (8001450 <HAL_RCC_OscConfig+0x4b8>)
 8001258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125c:	6593      	str	r3, [r2, #88]	; 0x58
 800125e:	4b7c      	ldr	r3, [pc, #496]	; (8001450 <HAL_RCC_OscConfig+0x4b8>)
 8001260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800126a:	2301      	movs	r3, #1
 800126c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800126e:	4b79      	ldr	r3, [pc, #484]	; (8001454 <HAL_RCC_OscConfig+0x4bc>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001276:	2b00      	cmp	r3, #0
 8001278:	d118      	bne.n	80012ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800127a:	4b76      	ldr	r3, [pc, #472]	; (8001454 <HAL_RCC_OscConfig+0x4bc>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a75      	ldr	r2, [pc, #468]	; (8001454 <HAL_RCC_OscConfig+0x4bc>)
 8001280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001286:	f7ff fa27 	bl	80006d8 <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800128c:	e008      	b.n	80012a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800128e:	f7ff fa23 	bl	80006d8 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e18b      	b.n	80015b8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012a0:	4b6c      	ldr	r3, [pc, #432]	; (8001454 <HAL_RCC_OscConfig+0x4bc>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d0f0      	beq.n	800128e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d108      	bne.n	80012c6 <HAL_RCC_OscConfig+0x32e>
 80012b4:	4b66      	ldr	r3, [pc, #408]	; (8001450 <HAL_RCC_OscConfig+0x4b8>)
 80012b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ba:	4a65      	ldr	r2, [pc, #404]	; (8001450 <HAL_RCC_OscConfig+0x4b8>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012c4:	e024      	b.n	8001310 <HAL_RCC_OscConfig+0x378>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	2b05      	cmp	r3, #5
 80012cc:	d110      	bne.n	80012f0 <HAL_RCC_OscConfig+0x358>
 80012ce:	4b60      	ldr	r3, [pc, #384]	; (8001450 <HAL_RCC_OscConfig+0x4b8>)
 80012d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012d4:	4a5e      	ldr	r2, [pc, #376]	; (8001450 <HAL_RCC_OscConfig+0x4b8>)
 80012d6:	f043 0304 	orr.w	r3, r3, #4
 80012da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012de:	4b5c      	ldr	r3, [pc, #368]	; (8001450 <HAL_RCC_OscConfig+0x4b8>)
 80012e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012e4:	4a5a      	ldr	r2, [pc, #360]	; (8001450 <HAL_RCC_OscConfig+0x4b8>)
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012ee:	e00f      	b.n	8001310 <HAL_RCC_OscConfig+0x378>
 80012f0:	4b57      	ldr	r3, [pc, #348]	; (8001450 <HAL_RCC_OscConfig+0x4b8>)
 80012f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012f6:	4a56      	ldr	r2, [pc, #344]	; (8001450 <HAL_RCC_OscConfig+0x4b8>)
 80012f8:	f023 0301 	bic.w	r3, r3, #1
 80012fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001300:	4b53      	ldr	r3, [pc, #332]	; (8001450 <HAL_RCC_OscConfig+0x4b8>)
 8001302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001306:	4a52      	ldr	r2, [pc, #328]	; (8001450 <HAL_RCC_OscConfig+0x4b8>)
 8001308:	f023 0304 	bic.w	r3, r3, #4
 800130c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d016      	beq.n	8001346 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001318:	f7ff f9de 	bl	80006d8 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800131e:	e00a      	b.n	8001336 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001320:	f7ff f9da 	bl	80006d8 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	f241 3288 	movw	r2, #5000	; 0x1388
 800132e:	4293      	cmp	r3, r2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e140      	b.n	80015b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001336:	4b46      	ldr	r3, [pc, #280]	; (8001450 <HAL_RCC_OscConfig+0x4b8>)
 8001338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0ed      	beq.n	8001320 <HAL_RCC_OscConfig+0x388>
 8001344:	e015      	b.n	8001372 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001346:	f7ff f9c7 	bl	80006d8 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800134c:	e00a      	b.n	8001364 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800134e:	f7ff f9c3 	bl	80006d8 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	f241 3288 	movw	r2, #5000	; 0x1388
 800135c:	4293      	cmp	r3, r2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e129      	b.n	80015b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001364:	4b3a      	ldr	r3, [pc, #232]	; (8001450 <HAL_RCC_OscConfig+0x4b8>)
 8001366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1ed      	bne.n	800134e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001372:	7ffb      	ldrb	r3, [r7, #31]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d105      	bne.n	8001384 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001378:	4b35      	ldr	r3, [pc, #212]	; (8001450 <HAL_RCC_OscConfig+0x4b8>)
 800137a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137c:	4a34      	ldr	r2, [pc, #208]	; (8001450 <HAL_RCC_OscConfig+0x4b8>)
 800137e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001382:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0320 	and.w	r3, r3, #32
 800138c:	2b00      	cmp	r3, #0
 800138e:	d03c      	beq.n	800140a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d01c      	beq.n	80013d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001398:	4b2d      	ldr	r3, [pc, #180]	; (8001450 <HAL_RCC_OscConfig+0x4b8>)
 800139a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800139e:	4a2c      	ldr	r2, [pc, #176]	; (8001450 <HAL_RCC_OscConfig+0x4b8>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a8:	f7ff f996 	bl	80006d8 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013b0:	f7ff f992 	bl	80006d8 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e0fa      	b.n	80015b8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80013c2:	4b23      	ldr	r3, [pc, #140]	; (8001450 <HAL_RCC_OscConfig+0x4b8>)
 80013c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0ef      	beq.n	80013b0 <HAL_RCC_OscConfig+0x418>
 80013d0:	e01b      	b.n	800140a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80013d2:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <HAL_RCC_OscConfig+0x4b8>)
 80013d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013d8:	4a1d      	ldr	r2, [pc, #116]	; (8001450 <HAL_RCC_OscConfig+0x4b8>)
 80013da:	f023 0301 	bic.w	r3, r3, #1
 80013de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e2:	f7ff f979 	bl	80006d8 <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013ea:	f7ff f975 	bl	80006d8 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e0dd      	b.n	80015b8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80013fc:	4b14      	ldr	r3, [pc, #80]	; (8001450 <HAL_RCC_OscConfig+0x4b8>)
 80013fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1ef      	bne.n	80013ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 80d1 	beq.w	80015b6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001414:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <HAL_RCC_OscConfig+0x4b8>)
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f003 030c 	and.w	r3, r3, #12
 800141c:	2b0c      	cmp	r3, #12
 800141e:	f000 808b 	beq.w	8001538 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	2b02      	cmp	r3, #2
 8001428:	d15e      	bne.n	80014e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <HAL_RCC_OscConfig+0x4b8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a08      	ldr	r2, [pc, #32]	; (8001450 <HAL_RCC_OscConfig+0x4b8>)
 8001430:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001436:	f7ff f94f 	bl	80006d8 <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800143c:	e00c      	b.n	8001458 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800143e:	f7ff f94b 	bl	80006d8 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d905      	bls.n	8001458 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e0b3      	b.n	80015b8 <HAL_RCC_OscConfig+0x620>
 8001450:	40021000 	.word	0x40021000
 8001454:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001458:	4b59      	ldr	r3, [pc, #356]	; (80015c0 <HAL_RCC_OscConfig+0x628>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1ec      	bne.n	800143e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001464:	4b56      	ldr	r3, [pc, #344]	; (80015c0 <HAL_RCC_OscConfig+0x628>)
 8001466:	68da      	ldr	r2, [r3, #12]
 8001468:	4b56      	ldr	r3, [pc, #344]	; (80015c4 <HAL_RCC_OscConfig+0x62c>)
 800146a:	4013      	ands	r3, r2
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	6a11      	ldr	r1, [r2, #32]
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001474:	3a01      	subs	r2, #1
 8001476:	0112      	lsls	r2, r2, #4
 8001478:	4311      	orrs	r1, r2
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800147e:	0212      	lsls	r2, r2, #8
 8001480:	4311      	orrs	r1, r2
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001486:	0852      	lsrs	r2, r2, #1
 8001488:	3a01      	subs	r2, #1
 800148a:	0552      	lsls	r2, r2, #21
 800148c:	4311      	orrs	r1, r2
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001492:	0852      	lsrs	r2, r2, #1
 8001494:	3a01      	subs	r2, #1
 8001496:	0652      	lsls	r2, r2, #25
 8001498:	4311      	orrs	r1, r2
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800149e:	06d2      	lsls	r2, r2, #27
 80014a0:	430a      	orrs	r2, r1
 80014a2:	4947      	ldr	r1, [pc, #284]	; (80015c0 <HAL_RCC_OscConfig+0x628>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014a8:	4b45      	ldr	r3, [pc, #276]	; (80015c0 <HAL_RCC_OscConfig+0x628>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a44      	ldr	r2, [pc, #272]	; (80015c0 <HAL_RCC_OscConfig+0x628>)
 80014ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014b4:	4b42      	ldr	r3, [pc, #264]	; (80015c0 <HAL_RCC_OscConfig+0x628>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	4a41      	ldr	r2, [pc, #260]	; (80015c0 <HAL_RCC_OscConfig+0x628>)
 80014ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c0:	f7ff f90a 	bl	80006d8 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c8:	f7ff f906 	bl	80006d8 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e06e      	b.n	80015b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014da:	4b39      	ldr	r3, [pc, #228]	; (80015c0 <HAL_RCC_OscConfig+0x628>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0x530>
 80014e6:	e066      	b.n	80015b6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e8:	4b35      	ldr	r3, [pc, #212]	; (80015c0 <HAL_RCC_OscConfig+0x628>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a34      	ldr	r2, [pc, #208]	; (80015c0 <HAL_RCC_OscConfig+0x628>)
 80014ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014f2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80014f4:	4b32      	ldr	r3, [pc, #200]	; (80015c0 <HAL_RCC_OscConfig+0x628>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	4a31      	ldr	r2, [pc, #196]	; (80015c0 <HAL_RCC_OscConfig+0x628>)
 80014fa:	f023 0303 	bic.w	r3, r3, #3
 80014fe:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001500:	4b2f      	ldr	r3, [pc, #188]	; (80015c0 <HAL_RCC_OscConfig+0x628>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	4a2e      	ldr	r2, [pc, #184]	; (80015c0 <HAL_RCC_OscConfig+0x628>)
 8001506:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800150a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800150e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001510:	f7ff f8e2 	bl	80006d8 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001518:	f7ff f8de 	bl	80006d8 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e046      	b.n	80015b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800152a:	4b25      	ldr	r3, [pc, #148]	; (80015c0 <HAL_RCC_OscConfig+0x628>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0x580>
 8001536:	e03e      	b.n	80015b6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	69db      	ldr	r3, [r3, #28]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d101      	bne.n	8001544 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e039      	b.n	80015b8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001544:	4b1e      	ldr	r3, [pc, #120]	; (80015c0 <HAL_RCC_OscConfig+0x628>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	f003 0203 	and.w	r2, r3, #3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	429a      	cmp	r2, r3
 8001556:	d12c      	bne.n	80015b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	3b01      	subs	r3, #1
 8001564:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001566:	429a      	cmp	r2, r3
 8001568:	d123      	bne.n	80015b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001574:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001576:	429a      	cmp	r2, r3
 8001578:	d11b      	bne.n	80015b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001584:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001586:	429a      	cmp	r2, r3
 8001588:	d113      	bne.n	80015b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001594:	085b      	lsrs	r3, r3, #1
 8001596:	3b01      	subs	r3, #1
 8001598:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800159a:	429a      	cmp	r2, r3
 800159c:	d109      	bne.n	80015b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015a8:	085b      	lsrs	r3, r3, #1
 80015aa:	3b01      	subs	r3, #1
 80015ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d001      	beq.n	80015b6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e000      	b.n	80015b8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3720      	adds	r7, #32
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40021000 	.word	0x40021000
 80015c4:	019f800c 	.word	0x019f800c

080015c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e11e      	b.n	800181e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015e0:	4b91      	ldr	r3, [pc, #580]	; (8001828 <HAL_RCC_ClockConfig+0x260>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 030f 	and.w	r3, r3, #15
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d910      	bls.n	8001610 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ee:	4b8e      	ldr	r3, [pc, #568]	; (8001828 <HAL_RCC_ClockConfig+0x260>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f023 020f 	bic.w	r2, r3, #15
 80015f6:	498c      	ldr	r1, [pc, #560]	; (8001828 <HAL_RCC_ClockConfig+0x260>)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015fe:	4b8a      	ldr	r3, [pc, #552]	; (8001828 <HAL_RCC_ClockConfig+0x260>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	429a      	cmp	r2, r3
 800160a:	d001      	beq.n	8001610 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e106      	b.n	800181e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	2b00      	cmp	r3, #0
 800161a:	d073      	beq.n	8001704 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b03      	cmp	r3, #3
 8001622:	d129      	bne.n	8001678 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001624:	4b81      	ldr	r3, [pc, #516]	; (800182c <HAL_RCC_ClockConfig+0x264>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d101      	bne.n	8001634 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e0f4      	b.n	800181e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001634:	f000 f966 	bl	8001904 <RCC_GetSysClockFreqFromPLLSource>
 8001638:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	4a7c      	ldr	r2, [pc, #496]	; (8001830 <HAL_RCC_ClockConfig+0x268>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d93f      	bls.n	80016c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001642:	4b7a      	ldr	r3, [pc, #488]	; (800182c <HAL_RCC_ClockConfig+0x264>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d009      	beq.n	8001662 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001656:	2b00      	cmp	r3, #0
 8001658:	d033      	beq.n	80016c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800165e:	2b00      	cmp	r3, #0
 8001660:	d12f      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001662:	4b72      	ldr	r3, [pc, #456]	; (800182c <HAL_RCC_ClockConfig+0x264>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800166a:	4a70      	ldr	r2, [pc, #448]	; (800182c <HAL_RCC_ClockConfig+0x264>)
 800166c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001670:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001672:	2380      	movs	r3, #128	; 0x80
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	e024      	b.n	80016c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b02      	cmp	r3, #2
 800167e:	d107      	bne.n	8001690 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001680:	4b6a      	ldr	r3, [pc, #424]	; (800182c <HAL_RCC_ClockConfig+0x264>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d109      	bne.n	80016a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e0c6      	b.n	800181e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001690:	4b66      	ldr	r3, [pc, #408]	; (800182c <HAL_RCC_ClockConfig+0x264>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e0be      	b.n	800181e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80016a0:	f000 f8ce 	bl	8001840 <HAL_RCC_GetSysClockFreq>
 80016a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	4a61      	ldr	r2, [pc, #388]	; (8001830 <HAL_RCC_ClockConfig+0x268>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d909      	bls.n	80016c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80016ae:	4b5f      	ldr	r3, [pc, #380]	; (800182c <HAL_RCC_ClockConfig+0x264>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016b6:	4a5d      	ldr	r2, [pc, #372]	; (800182c <HAL_RCC_ClockConfig+0x264>)
 80016b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80016be:	2380      	movs	r3, #128	; 0x80
 80016c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80016c2:	4b5a      	ldr	r3, [pc, #360]	; (800182c <HAL_RCC_ClockConfig+0x264>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f023 0203 	bic.w	r2, r3, #3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	4957      	ldr	r1, [pc, #348]	; (800182c <HAL_RCC_ClockConfig+0x264>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016d4:	f7ff f800 	bl	80006d8 <HAL_GetTick>
 80016d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016da:	e00a      	b.n	80016f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016dc:	f7fe fffc 	bl	80006d8 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e095      	b.n	800181e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016f2:	4b4e      	ldr	r3, [pc, #312]	; (800182c <HAL_RCC_ClockConfig+0x264>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 020c 	and.w	r2, r3, #12
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	429a      	cmp	r2, r3
 8001702:	d1eb      	bne.n	80016dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d023      	beq.n	8001758 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	d005      	beq.n	8001728 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800171c:	4b43      	ldr	r3, [pc, #268]	; (800182c <HAL_RCC_ClockConfig+0x264>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	4a42      	ldr	r2, [pc, #264]	; (800182c <HAL_RCC_ClockConfig+0x264>)
 8001722:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001726:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0308 	and.w	r3, r3, #8
 8001730:	2b00      	cmp	r3, #0
 8001732:	d007      	beq.n	8001744 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001734:	4b3d      	ldr	r3, [pc, #244]	; (800182c <HAL_RCC_ClockConfig+0x264>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800173c:	4a3b      	ldr	r2, [pc, #236]	; (800182c <HAL_RCC_ClockConfig+0x264>)
 800173e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001742:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001744:	4b39      	ldr	r3, [pc, #228]	; (800182c <HAL_RCC_ClockConfig+0x264>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	4936      	ldr	r1, [pc, #216]	; (800182c <HAL_RCC_ClockConfig+0x264>)
 8001752:	4313      	orrs	r3, r2
 8001754:	608b      	str	r3, [r1, #8]
 8001756:	e008      	b.n	800176a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	2b80      	cmp	r3, #128	; 0x80
 800175c:	d105      	bne.n	800176a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800175e:	4b33      	ldr	r3, [pc, #204]	; (800182c <HAL_RCC_ClockConfig+0x264>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	4a32      	ldr	r2, [pc, #200]	; (800182c <HAL_RCC_ClockConfig+0x264>)
 8001764:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001768:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800176a:	4b2f      	ldr	r3, [pc, #188]	; (8001828 <HAL_RCC_ClockConfig+0x260>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d21d      	bcs.n	80017b4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001778:	4b2b      	ldr	r3, [pc, #172]	; (8001828 <HAL_RCC_ClockConfig+0x260>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f023 020f 	bic.w	r2, r3, #15
 8001780:	4929      	ldr	r1, [pc, #164]	; (8001828 <HAL_RCC_ClockConfig+0x260>)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	4313      	orrs	r3, r2
 8001786:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001788:	f7fe ffa6 	bl	80006d8 <HAL_GetTick>
 800178c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800178e:	e00a      	b.n	80017a6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001790:	f7fe ffa2 	bl	80006d8 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	f241 3288 	movw	r2, #5000	; 0x1388
 800179e:	4293      	cmp	r3, r2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e03b      	b.n	800181e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a6:	4b20      	ldr	r3, [pc, #128]	; (8001828 <HAL_RCC_ClockConfig+0x260>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d1ed      	bne.n	8001790 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d008      	beq.n	80017d2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017c0:	4b1a      	ldr	r3, [pc, #104]	; (800182c <HAL_RCC_ClockConfig+0x264>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	4917      	ldr	r1, [pc, #92]	; (800182c <HAL_RCC_ClockConfig+0x264>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d009      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017de:	4b13      	ldr	r3, [pc, #76]	; (800182c <HAL_RCC_ClockConfig+0x264>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	490f      	ldr	r1, [pc, #60]	; (800182c <HAL_RCC_ClockConfig+0x264>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017f2:	f000 f825 	bl	8001840 <HAL_RCC_GetSysClockFreq>
 80017f6:	4602      	mov	r2, r0
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <HAL_RCC_ClockConfig+0x264>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	490c      	ldr	r1, [pc, #48]	; (8001834 <HAL_RCC_ClockConfig+0x26c>)
 8001804:	5ccb      	ldrb	r3, [r1, r3]
 8001806:	f003 031f 	and.w	r3, r3, #31
 800180a:	fa22 f303 	lsr.w	r3, r2, r3
 800180e:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <HAL_RCC_ClockConfig+0x270>)
 8001810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001812:	4b0a      	ldr	r3, [pc, #40]	; (800183c <HAL_RCC_ClockConfig+0x274>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe ff12 	bl	8000640 <HAL_InitTick>
 800181c:	4603      	mov	r3, r0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40022000 	.word	0x40022000
 800182c:	40021000 	.word	0x40021000
 8001830:	04c4b400 	.word	0x04c4b400
 8001834:	08001ef0 	.word	0x08001ef0
 8001838:	20000000 	.word	0x20000000
 800183c:	20000004 	.word	0x20000004

08001840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001840:	b480      	push	{r7}
 8001842:	b087      	sub	sp, #28
 8001844:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001846:	4b2c      	ldr	r3, [pc, #176]	; (80018f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 030c 	and.w	r3, r3, #12
 800184e:	2b04      	cmp	r3, #4
 8001850:	d102      	bne.n	8001858 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001852:	4b2a      	ldr	r3, [pc, #168]	; (80018fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	e047      	b.n	80018e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001858:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 030c 	and.w	r3, r3, #12
 8001860:	2b08      	cmp	r3, #8
 8001862:	d102      	bne.n	800186a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001864:	4b26      	ldr	r3, [pc, #152]	; (8001900 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	e03e      	b.n	80018e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800186a:	4b23      	ldr	r3, [pc, #140]	; (80018f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 030c 	and.w	r3, r3, #12
 8001872:	2b0c      	cmp	r3, #12
 8001874:	d136      	bne.n	80018e4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001876:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001880:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	091b      	lsrs	r3, r3, #4
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	3301      	adds	r3, #1
 800188c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2b03      	cmp	r3, #3
 8001892:	d10c      	bne.n	80018ae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001894:	4a1a      	ldr	r2, [pc, #104]	; (8001900 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	fbb2 f3f3 	udiv	r3, r2, r3
 800189c:	4a16      	ldr	r2, [pc, #88]	; (80018f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800189e:	68d2      	ldr	r2, [r2, #12]
 80018a0:	0a12      	lsrs	r2, r2, #8
 80018a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80018a6:	fb02 f303 	mul.w	r3, r2, r3
 80018aa:	617b      	str	r3, [r7, #20]
      break;
 80018ac:	e00c      	b.n	80018c8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018ae:	4a13      	ldr	r2, [pc, #76]	; (80018fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b6:	4a10      	ldr	r2, [pc, #64]	; (80018f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018b8:	68d2      	ldr	r2, [r2, #12]
 80018ba:	0a12      	lsrs	r2, r2, #8
 80018bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80018c0:	fb02 f303 	mul.w	r3, r2, r3
 80018c4:	617b      	str	r3, [r7, #20]
      break;
 80018c6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	0e5b      	lsrs	r3, r3, #25
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	3301      	adds	r3, #1
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	e001      	b.n	80018e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80018e8:	693b      	ldr	r3, [r7, #16]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	371c      	adds	r7, #28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	40021000 	.word	0x40021000
 80018fc:	00f42400 	.word	0x00f42400
 8001900:	007a1200 	.word	0x007a1200

08001904 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001904:	b480      	push	{r7}
 8001906:	b087      	sub	sp, #28
 8001908:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800190a:	4b1e      	ldr	r3, [pc, #120]	; (8001984 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001914:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	091b      	lsrs	r3, r3, #4
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	3301      	adds	r3, #1
 8001920:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	2b03      	cmp	r3, #3
 8001926:	d10c      	bne.n	8001942 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001928:	4a17      	ldr	r2, [pc, #92]	; (8001988 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001930:	4a14      	ldr	r2, [pc, #80]	; (8001984 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001932:	68d2      	ldr	r2, [r2, #12]
 8001934:	0a12      	lsrs	r2, r2, #8
 8001936:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800193a:	fb02 f303 	mul.w	r3, r2, r3
 800193e:	617b      	str	r3, [r7, #20]
    break;
 8001940:	e00c      	b.n	800195c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001942:	4a12      	ldr	r2, [pc, #72]	; (800198c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	fbb2 f3f3 	udiv	r3, r2, r3
 800194a:	4a0e      	ldr	r2, [pc, #56]	; (8001984 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800194c:	68d2      	ldr	r2, [r2, #12]
 800194e:	0a12      	lsrs	r2, r2, #8
 8001950:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001954:	fb02 f303 	mul.w	r3, r2, r3
 8001958:	617b      	str	r3, [r7, #20]
    break;
 800195a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800195c:	4b09      	ldr	r3, [pc, #36]	; (8001984 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	0e5b      	lsrs	r3, r3, #25
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	3301      	adds	r3, #1
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	fbb2 f3f3 	udiv	r3, r2, r3
 8001974:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001976:	687b      	ldr	r3, [r7, #4]
}
 8001978:	4618      	mov	r0, r3
 800197a:	371c      	adds	r7, #28
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	40021000 	.word	0x40021000
 8001988:	007a1200 	.word	0x007a1200
 800198c:	00f42400 	.word	0x00f42400

08001990 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001998:	2300      	movs	r3, #0
 800199a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800199c:	2300      	movs	r3, #0
 800199e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 8098 	beq.w	8001ade <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ae:	2300      	movs	r3, #0
 80019b0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019b2:	4b43      	ldr	r3, [pc, #268]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80019b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d10d      	bne.n	80019da <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019be:	4b40      	ldr	r3, [pc, #256]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80019c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c2:	4a3f      	ldr	r2, [pc, #252]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80019c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c8:	6593      	str	r3, [r2, #88]	; 0x58
 80019ca:	4b3d      	ldr	r3, [pc, #244]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80019cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019d6:	2301      	movs	r3, #1
 80019d8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019da:	4b3a      	ldr	r3, [pc, #232]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a39      	ldr	r2, [pc, #228]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80019e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80019e6:	f7fe fe77 	bl	80006d8 <HAL_GetTick>
 80019ea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019ec:	e009      	b.n	8001a02 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ee:	f7fe fe73 	bl	80006d8 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d902      	bls.n	8001a02 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	74fb      	strb	r3, [r7, #19]
        break;
 8001a00:	e005      	b.n	8001a0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a02:	4b30      	ldr	r3, [pc, #192]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0ef      	beq.n	80019ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001a0e:	7cfb      	ldrb	r3, [r7, #19]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d159      	bne.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001a14:	4b2a      	ldr	r3, [pc, #168]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a1e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d01e      	beq.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d019      	beq.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001a30:	4b23      	ldr	r3, [pc, #140]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001a3c:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a42:	4a1f      	ldr	r2, [pc, #124]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001a4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a52:	4a1b      	ldr	r2, [pc, #108]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001a5c:	4a18      	ldr	r2, [pc, #96]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d016      	beq.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6e:	f7fe fe33 	bl	80006d8 <HAL_GetTick>
 8001a72:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a74:	e00b      	b.n	8001a8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a76:	f7fe fe2f 	bl	80006d8 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d902      	bls.n	8001a8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	74fb      	strb	r3, [r7, #19]
            break;
 8001a8c:	e006      	b.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0ec      	beq.n	8001a76 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001a9c:	7cfb      	ldrb	r3, [r7, #19]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d10b      	bne.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001aa2:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab0:	4903      	ldr	r1, [pc, #12]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001ab8:	e008      	b.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001aba:	7cfb      	ldrb	r3, [r7, #19]
 8001abc:	74bb      	strb	r3, [r7, #18]
 8001abe:	e005      	b.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ac8:	7cfb      	ldrb	r3, [r7, #19]
 8001aca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001acc:	7c7b      	ldrb	r3, [r7, #17]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d105      	bne.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad2:	4ba7      	ldr	r3, [pc, #668]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad6:	4aa6      	ldr	r2, [pc, #664]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001adc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00a      	beq.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001aea:	4ba1      	ldr	r3, [pc, #644]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001af0:	f023 0203 	bic.w	r2, r3, #3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	499d      	ldr	r1, [pc, #628]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00a      	beq.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b0c:	4b98      	ldr	r3, [pc, #608]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b12:	f023 020c 	bic.w	r2, r3, #12
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	4995      	ldr	r1, [pc, #596]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00a      	beq.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001b2e:	4b90      	ldr	r3, [pc, #576]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	498c      	ldr	r1, [pc, #560]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00a      	beq.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001b50:	4b87      	ldr	r3, [pc, #540]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	4984      	ldr	r1, [pc, #528]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0310 	and.w	r3, r3, #16
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00a      	beq.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001b72:	4b7f      	ldr	r3, [pc, #508]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	497b      	ldr	r1, [pc, #492]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0320 	and.w	r3, r3, #32
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00a      	beq.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001b94:	4b76      	ldr	r3, [pc, #472]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	4973      	ldr	r1, [pc, #460]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00a      	beq.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001bb6:	4b6e      	ldr	r3, [pc, #440]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bbc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	496a      	ldr	r1, [pc, #424]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00a      	beq.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001bd8:	4b65      	ldr	r3, [pc, #404]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bde:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	4962      	ldr	r1, [pc, #392]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00a      	beq.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001bfa:	4b5d      	ldr	r3, [pc, #372]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c08:	4959      	ldr	r1, [pc, #356]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00a      	beq.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001c1c:	4b54      	ldr	r3, [pc, #336]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c22:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2a:	4951      	ldr	r1, [pc, #324]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d015      	beq.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c3e:	4b4c      	ldr	r3, [pc, #304]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4c:	4948      	ldr	r1, [pc, #288]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c5c:	d105      	bne.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001c5e:	4b44      	ldr	r3, [pc, #272]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	4a43      	ldr	r2, [pc, #268]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c68:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d015      	beq.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001c76:	4b3e      	ldr	r3, [pc, #248]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c84:	493a      	ldr	r1, [pc, #232]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c94:	d105      	bne.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001c96:	4b36      	ldr	r3, [pc, #216]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	4a35      	ldr	r2, [pc, #212]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ca0:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d015      	beq.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001cae:	4b30      	ldr	r3, [pc, #192]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cb4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cbc:	492c      	ldr	r1, [pc, #176]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ccc:	d105      	bne.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001cce:	4b28      	ldr	r3, [pc, #160]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	4a27      	ldr	r2, [pc, #156]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001cd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001cd8:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d015      	beq.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ce6:	4b22      	ldr	r3, [pc, #136]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf4:	491e      	ldr	r1, [pc, #120]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d04:	d105      	bne.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001d06:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	4a19      	ldr	r2, [pc, #100]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d10:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d015      	beq.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001d1e:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d24:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d2c:	4910      	ldr	r1, [pc, #64]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d3c:	d105      	bne.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001d3e:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	4a0b      	ldr	r2, [pc, #44]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d48:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d018      	beq.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d5c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	4902      	ldr	r1, [pc, #8]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	e001      	b.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8001d70:	40021000 	.word	0x40021000
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d7a:	d105      	bne.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001d7c:	4b21      	ldr	r3, [pc, #132]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	4a20      	ldr	r2, [pc, #128]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d86:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d015      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8001d94:	4b1b      	ldr	r3, [pc, #108]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d9a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	4918      	ldr	r1, [pc, #96]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db2:	d105      	bne.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001db4:	4b13      	ldr	r3, [pc, #76]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	4a12      	ldr	r2, [pc, #72]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dbe:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d015      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8001dcc:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001dce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001dd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dda:	490a      	ldr	r1, [pc, #40]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001de6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001dea:	d105      	bne.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001dec:	4b05      	ldr	r3, [pc, #20]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	4a04      	ldr	r2, [pc, #16]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001df2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001df6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8001df8:	7cbb      	ldrb	r3, [r7, #18]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40021000 	.word	0x40021000

08001e08 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8001e10:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8001e14:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	43db      	mvns	r3, r3
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	4013      	ands	r3, r2
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001e3e:	b084      	sub	sp, #16
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	f107 0014 	add.w	r0, r7, #20
 8001e4c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	b004      	add	sp, #16
 8001e7e:	4770      	bx	lr

08001e80 <memset>:
 8001e80:	4402      	add	r2, r0
 8001e82:	4603      	mov	r3, r0
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d100      	bne.n	8001e8a <memset+0xa>
 8001e88:	4770      	bx	lr
 8001e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8001e8e:	e7f9      	b.n	8001e84 <memset+0x4>

08001e90 <__libc_init_array>:
 8001e90:	b570      	push	{r4, r5, r6, lr}
 8001e92:	4d0d      	ldr	r5, [pc, #52]	; (8001ec8 <__libc_init_array+0x38>)
 8001e94:	4c0d      	ldr	r4, [pc, #52]	; (8001ecc <__libc_init_array+0x3c>)
 8001e96:	1b64      	subs	r4, r4, r5
 8001e98:	10a4      	asrs	r4, r4, #2
 8001e9a:	2600      	movs	r6, #0
 8001e9c:	42a6      	cmp	r6, r4
 8001e9e:	d109      	bne.n	8001eb4 <__libc_init_array+0x24>
 8001ea0:	4d0b      	ldr	r5, [pc, #44]	; (8001ed0 <__libc_init_array+0x40>)
 8001ea2:	4c0c      	ldr	r4, [pc, #48]	; (8001ed4 <__libc_init_array+0x44>)
 8001ea4:	f000 f818 	bl	8001ed8 <_init>
 8001ea8:	1b64      	subs	r4, r4, r5
 8001eaa:	10a4      	asrs	r4, r4, #2
 8001eac:	2600      	movs	r6, #0
 8001eae:	42a6      	cmp	r6, r4
 8001eb0:	d105      	bne.n	8001ebe <__libc_init_array+0x2e>
 8001eb2:	bd70      	pop	{r4, r5, r6, pc}
 8001eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001eb8:	4798      	blx	r3
 8001eba:	3601      	adds	r6, #1
 8001ebc:	e7ee      	b.n	8001e9c <__libc_init_array+0xc>
 8001ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ec2:	4798      	blx	r3
 8001ec4:	3601      	adds	r6, #1
 8001ec6:	e7f2      	b.n	8001eae <__libc_init_array+0x1e>
 8001ec8:	08001f00 	.word	0x08001f00
 8001ecc:	08001f00 	.word	0x08001f00
 8001ed0:	08001f00 	.word	0x08001f00
 8001ed4:	08001f04 	.word	0x08001f04

08001ed8 <_init>:
 8001ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eda:	bf00      	nop
 8001edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ede:	bc08      	pop	{r3}
 8001ee0:	469e      	mov	lr, r3
 8001ee2:	4770      	bx	lr

08001ee4 <_fini>:
 8001ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ee6:	bf00      	nop
 8001ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eea:	bc08      	pop	{r3}
 8001eec:	469e      	mov	lr, r3
 8001eee:	4770      	bx	lr
