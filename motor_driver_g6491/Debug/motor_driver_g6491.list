
motor_driver_g6491.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002178  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002350  08002350  00012350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002360  08002360  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002360  08002360  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002360  08002360  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002360  08002360  00012360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002364  08002364  00012364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  2000000c  08002374  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08002374  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ef78  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002416  00000000  00000000  0002eff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef8  00000000  00000000  00031410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b78  00000000  00000000  00032308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e36e  00000000  00000000  00032e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010892  00000000  00000000  000511ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c65d3  00000000  00000000  00061a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e90  00000000  00000000  00128054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0012bee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002338 	.word	0x08002338

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002338 	.word	0x08002338

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */


    HAL_Init();
 800021c:	f000 fa5d 	bl	80006da <HAL_Init>
    SystemClock_Config();
 8000220:	f000 f80f 	bl	8000242 <SystemClock_Config>
    MX_GPIO_Init();
 8000224:	f000 f878 	bl	8000318 <MX_GPIO_Init>

    MX_TIM6_Init();
 8000228:	f000 f9d2 	bl	80005d0 <MX_TIM6_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022c:	f000 fa55 	bl	80006da <HAL_Init>
//  BitBangPWM_Init_2();

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000230:	f000 f807 	bl	8000242 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000234:	f000 f870 	bl	8000318 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8000238:	f000 f846 	bl	80002c8 <MX_USB_PCD_Init>
//	  HAL_GPIO_WritePin(GPIOA, PWM1_Pin, GPIO_PIN_RESET); // LED off
//	  HAL_Delay(5); // 1 second pause between dots/dashes of same letter


    /* USER CODE END WHILE */
	  reverse();
 800023c:	f000 f920 	bl	8000480 <reverse>
 8000240:	e7fc      	b.n	800023c <main+0x24>

08000242 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000242:	b580      	push	{r7, lr}
 8000244:	b094      	sub	sp, #80	; 0x50
 8000246:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000248:	f107 0318 	add.w	r3, r7, #24
 800024c:	2238      	movs	r2, #56	; 0x38
 800024e:	2100      	movs	r1, #0
 8000250:	4618      	mov	r0, r3
 8000252:	f002 f845 	bl	80022e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	2200      	movs	r2, #0
 800025a:	601a      	str	r2, [r3, #0]
 800025c:	605a      	str	r2, [r3, #4]
 800025e:	609a      	str	r2, [r3, #8]
 8000260:	60da      	str	r2, [r3, #12]
 8000262:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000264:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000268:	f000 fe9e 	bl	8000fa8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800026c:	2322      	movs	r3, #34	; 0x22
 800026e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000270:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000274:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000276:	2340      	movs	r3, #64	; 0x40
 8000278:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800027a:	2301      	movs	r3, #1
 800027c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800027e:	2300      	movs	r3, #0
 8000280:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000282:	f107 0318 	add.w	r3, r7, #24
 8000286:	4618      	mov	r0, r3
 8000288:	f000 ff32 	bl	80010f0 <HAL_RCC_OscConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000292:	f000 f903 	bl	800049c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000296:	230f      	movs	r3, #15
 8000298:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800029a:	2301      	movs	r3, #1
 800029c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2100      	movs	r1, #0
 80002ae:	4618      	mov	r0, r3
 80002b0:	f001 fa36 	bl	8001720 <HAL_RCC_ClockConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80002ba:	f000 f8ef 	bl	800049c <Error_Handler>
  }
}
 80002be:	bf00      	nop
 80002c0:	3750      	adds	r7, #80	; 0x50
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80002cc:	4b10      	ldr	r3, [pc, #64]	; (8000310 <MX_USB_PCD_Init+0x48>)
 80002ce:	4a11      	ldr	r2, [pc, #68]	; (8000314 <MX_USB_PCD_Init+0x4c>)
 80002d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80002d2:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <MX_USB_PCD_Init+0x48>)
 80002d4:	2208      	movs	r2, #8
 80002d6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80002d8:	4b0d      	ldr	r3, [pc, #52]	; (8000310 <MX_USB_PCD_Init+0x48>)
 80002da:	2202      	movs	r2, #2
 80002dc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80002de:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <MX_USB_PCD_Init+0x48>)
 80002e0:	2202      	movs	r2, #2
 80002e2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80002e4:	4b0a      	ldr	r3, [pc, #40]	; (8000310 <MX_USB_PCD_Init+0x48>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80002ea:	4b09      	ldr	r3, [pc, #36]	; (8000310 <MX_USB_PCD_Init+0x48>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80002f0:	4b07      	ldr	r3, [pc, #28]	; (8000310 <MX_USB_PCD_Init+0x48>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80002f6:	4b06      	ldr	r3, [pc, #24]	; (8000310 <MX_USB_PCD_Init+0x48>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80002fc:	4804      	ldr	r0, [pc, #16]	; (8000310 <MX_USB_PCD_Init+0x48>)
 80002fe:	f000 fd43 	bl	8000d88 <HAL_PCD_Init>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000308:	f000 f8c8 	bl	800049c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800030c:	bf00      	nop
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000028 	.word	0x20000028
 8000314:	40005c00 	.word	0x40005c00

08000318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b08a      	sub	sp, #40	; 0x28
 800031c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031e:	f107 0314 	add.w	r3, r7, #20
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
 800032a:	60da      	str	r2, [r3, #12]
 800032c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800032e:	4b37      	ldr	r3, [pc, #220]	; (800040c <MX_GPIO_Init+0xf4>)
 8000330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000332:	4a36      	ldr	r2, [pc, #216]	; (800040c <MX_GPIO_Init+0xf4>)
 8000334:	f043 0320 	orr.w	r3, r3, #32
 8000338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800033a:	4b34      	ldr	r3, [pc, #208]	; (800040c <MX_GPIO_Init+0xf4>)
 800033c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800033e:	f003 0320 	and.w	r3, r3, #32
 8000342:	613b      	str	r3, [r7, #16]
 8000344:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000346:	4b31      	ldr	r3, [pc, #196]	; (800040c <MX_GPIO_Init+0xf4>)
 8000348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800034a:	4a30      	ldr	r2, [pc, #192]	; (800040c <MX_GPIO_Init+0xf4>)
 800034c:	f043 0301 	orr.w	r3, r3, #1
 8000350:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000352:	4b2e      	ldr	r3, [pc, #184]	; (800040c <MX_GPIO_Init+0xf4>)
 8000354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000356:	f003 0301 	and.w	r3, r3, #1
 800035a:	60fb      	str	r3, [r7, #12]
 800035c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800035e:	4b2b      	ldr	r3, [pc, #172]	; (800040c <MX_GPIO_Init+0xf4>)
 8000360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000362:	4a2a      	ldr	r2, [pc, #168]	; (800040c <MX_GPIO_Init+0xf4>)
 8000364:	f043 0304 	orr.w	r3, r3, #4
 8000368:	64d3      	str	r3, [r2, #76]	; 0x4c
 800036a:	4b28      	ldr	r3, [pc, #160]	; (800040c <MX_GPIO_Init+0xf4>)
 800036c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800036e:	f003 0304 	and.w	r3, r3, #4
 8000372:	60bb      	str	r3, [r7, #8]
 8000374:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000376:	4b25      	ldr	r3, [pc, #148]	; (800040c <MX_GPIO_Init+0xf4>)
 8000378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800037a:	4a24      	ldr	r2, [pc, #144]	; (800040c <MX_GPIO_Init+0xf4>)
 800037c:	f043 0302 	orr.w	r3, r3, #2
 8000380:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000382:	4b22      	ldr	r3, [pc, #136]	; (800040c <MX_GPIO_Init+0xf4>)
 8000384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000386:	f003 0302 	and.w	r3, r3, #2
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800038e:	2200      	movs	r2, #0
 8000390:	21f8      	movs	r1, #248	; 0xf8
 8000392:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000396:	f000 fcc5 	bl	8000d24 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800039a:	2200      	movs	r2, #0
 800039c:	2130      	movs	r1, #48	; 0x30
 800039e:	481c      	ldr	r0, [pc, #112]	; (8000410 <MX_GPIO_Init+0xf8>)
 80003a0:	f000 fcc0 	bl	8000d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWM1_Pin|PWM2_Pin, GPIO_PIN_RESET);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2103      	movs	r1, #3
 80003a8:	481a      	ldr	r0, [pc, #104]	; (8000414 <MX_GPIO_Init+0xfc>)
 80003aa:	f000 fcbb 	bl	8000d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA4 PA5 PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80003ae:	23f8      	movs	r3, #248	; 0xf8
 80003b0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b2:	2301      	movs	r3, #1
 80003b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b6:	2300      	movs	r3, #0
 80003b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ba:	2300      	movs	r3, #0
 80003bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003be:	f107 0314 	add.w	r3, r7, #20
 80003c2:	4619      	mov	r1, r3
 80003c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003c8:	f000 fb2a 	bl	8000a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80003cc:	2330      	movs	r3, #48	; 0x30
 80003ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d0:	2301      	movs	r3, #1
 80003d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d4:	2300      	movs	r3, #0
 80003d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d8:	2300      	movs	r3, #0
 80003da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003dc:	f107 0314 	add.w	r3, r7, #20
 80003e0:	4619      	mov	r1, r3
 80003e2:	480b      	ldr	r0, [pc, #44]	; (8000410 <MX_GPIO_Init+0xf8>)
 80003e4:	f000 fb1c 	bl	8000a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWM1_Pin PWM2_Pin */
  GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 80003e8:	2303      	movs	r3, #3
 80003ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ec:	2301      	movs	r3, #1
 80003ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f0:	2300      	movs	r3, #0
 80003f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f4:	2300      	movs	r3, #0
 80003f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003f8:	f107 0314 	add.w	r3, r7, #20
 80003fc:	4619      	mov	r1, r3
 80003fe:	4805      	ldr	r0, [pc, #20]	; (8000414 <MX_GPIO_Init+0xfc>)
 8000400:	f000 fb0e 	bl	8000a20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000404:	bf00      	nop
 8000406:	3728      	adds	r7, #40	; 0x28
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	40021000 	.word	0x40021000
 8000410:	48000800 	.word	0x48000800
 8000414:	48000400 	.word	0x48000400

08000418 <SetDutyCycle>:
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
}

void SetDutyCycle(uint16_t dutyCycle, uint16_t period, uint16_t pin)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	80fb      	strh	r3, [r7, #6]
 8000422:	460b      	mov	r3, r1
 8000424:	80bb      	strh	r3, [r7, #4]
 8000426:	4613      	mov	r3, r2
 8000428:	807b      	strh	r3, [r7, #2]
	uint16_t onTime = (dutyCycle * period) / 100;
 800042a:	88fb      	ldrh	r3, [r7, #6]
 800042c:	88ba      	ldrh	r2, [r7, #4]
 800042e:	fb02 f303 	mul.w	r3, r2, r3
 8000432:	4a11      	ldr	r2, [pc, #68]	; (8000478 <SetDutyCycle+0x60>)
 8000434:	fb82 1203 	smull	r1, r2, r2, r3
 8000438:	1152      	asrs	r2, r2, #5
 800043a:	17db      	asrs	r3, r3, #31
 800043c:	1ad3      	subs	r3, r2, r3
 800043e:	81fb      	strh	r3, [r7, #14]

	if (dutyCycle != 0) {
 8000440:	88fb      	ldrh	r3, [r7, #6]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d013      	beq.n	800046e <SetDutyCycle+0x56>
		HAL_GPIO_TogglePin(GPIOB, pin); // on
 8000446:	887b      	ldrh	r3, [r7, #2]
 8000448:	4619      	mov	r1, r3
 800044a:	480c      	ldr	r0, [pc, #48]	; (800047c <SetDutyCycle+0x64>)
 800044c:	f000 fc82 	bl	8000d54 <HAL_GPIO_TogglePin>
		HAL_Delay(onTime);
 8000450:	89fb      	ldrh	r3, [r7, #14]
 8000452:	4618      	mov	r0, r3
 8000454:	f000 f9b2 	bl	80007bc <HAL_Delay>

		HAL_GPIO_TogglePin(GPIOB, pin); // off
 8000458:	887b      	ldrh	r3, [r7, #2]
 800045a:	4619      	mov	r1, r3
 800045c:	4807      	ldr	r0, [pc, #28]	; (800047c <SetDutyCycle+0x64>)
 800045e:	f000 fc79 	bl	8000d54 <HAL_GPIO_TogglePin>
		HAL_Delay(period - onTime);
 8000462:	88ba      	ldrh	r2, [r7, #4]
 8000464:	89fb      	ldrh	r3, [r7, #14]
 8000466:	1ad3      	subs	r3, r2, r3
 8000468:	4618      	mov	r0, r3
 800046a:	f000 f9a7 	bl	80007bc <HAL_Delay>
	}

}
 800046e:	bf00      	nop
 8000470:	3710      	adds	r7, #16
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	51eb851f 	.word	0x51eb851f
 800047c:	48000400 	.word	0x48000400

08000480 <reverse>:
	  // forward
	  SetDutyCycle(75, 10, PWM1_Pin);
	  SetDutyCycle(0, 10, PWM2_Pin);
}

void reverse() {
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
	  // backwards
	  SetDutyCycle(75, 10, PWM2_Pin);
 8000484:	2202      	movs	r2, #2
 8000486:	210a      	movs	r1, #10
 8000488:	204b      	movs	r0, #75	; 0x4b
 800048a:	f7ff ffc5 	bl	8000418 <SetDutyCycle>
	  SetDutyCycle(0, 10, PWM1_Pin);
 800048e:	2201      	movs	r2, #1
 8000490:	210a      	movs	r1, #10
 8000492:	2000      	movs	r0, #0
 8000494:	f7ff ffc0 	bl	8000418 <SetDutyCycle>
}
 8000498:	bf00      	nop
 800049a:	bd80      	pop	{r7, pc}

0800049c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a0:	b672      	cpsid	i
}
 80004a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a4:	e7fe      	b.n	80004a4 <Error_Handler+0x8>
	...

080004a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ae:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <HAL_MspInit+0x44>)
 80004b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004b2:	4a0e      	ldr	r2, [pc, #56]	; (80004ec <HAL_MspInit+0x44>)
 80004b4:	f043 0301 	orr.w	r3, r3, #1
 80004b8:	6613      	str	r3, [r2, #96]	; 0x60
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <HAL_MspInit+0x44>)
 80004bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004c6:	4b09      	ldr	r3, [pc, #36]	; (80004ec <HAL_MspInit+0x44>)
 80004c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004ca:	4a08      	ldr	r2, [pc, #32]	; (80004ec <HAL_MspInit+0x44>)
 80004cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d0:	6593      	str	r3, [r2, #88]	; 0x58
 80004d2:	4b06      	ldr	r3, [pc, #24]	; (80004ec <HAL_MspInit+0x44>)
 80004d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004da:	603b      	str	r3, [r7, #0]
 80004dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	40021000 	.word	0x40021000

080004f0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b098      	sub	sp, #96	; 0x60
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004f8:	f107 0310 	add.w	r3, r7, #16
 80004fc:	2250      	movs	r2, #80	; 0x50
 80004fe:	2100      	movs	r1, #0
 8000500:	4618      	mov	r0, r3
 8000502:	f001 feed 	bl	80022e0 <memset>
  if(hpcd->Instance==USB)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a11      	ldr	r2, [pc, #68]	; (8000550 <HAL_PCD_MspInit+0x60>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d11a      	bne.n	8000546 <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000510:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000514:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000516:	2300      	movs	r3, #0
 8000518:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800051a:	f107 0310 	add.w	r3, r7, #16
 800051e:	4618      	mov	r0, r3
 8000520:	f001 fae2 	bl	8001ae8 <HAL_RCCEx_PeriphCLKConfig>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800052a:	f7ff ffb7 	bl	800049c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800052e:	4b09      	ldr	r3, [pc, #36]	; (8000554 <HAL_PCD_MspInit+0x64>)
 8000530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000532:	4a08      	ldr	r2, [pc, #32]	; (8000554 <HAL_PCD_MspInit+0x64>)
 8000534:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000538:	6593      	str	r3, [r2, #88]	; 0x58
 800053a:	4b06      	ldr	r3, [pc, #24]	; (8000554 <HAL_PCD_MspInit+0x64>)
 800053c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800053e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000546:	bf00      	nop
 8000548:	3760      	adds	r7, #96	; 0x60
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40005c00 	.word	0x40005c00
 8000554:	40021000 	.word	0x40021000

08000558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800055c:	e7fe      	b.n	800055c <NMI_Handler+0x4>

0800055e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000562:	e7fe      	b.n	8000562 <HardFault_Handler+0x4>

08000564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000568:	e7fe      	b.n	8000568 <MemManage_Handler+0x4>

0800056a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800056e:	e7fe      	b.n	800056e <BusFault_Handler+0x4>

08000570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000574:	e7fe      	b.n	8000574 <UsageFault_Handler+0x4>

08000576 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr

08000592 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a4:	f000 f8ec 	bl	8000780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}

080005ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <SystemInit+0x20>)
 80005b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005b6:	4a05      	ldr	r2, [pc, #20]	; (80005cc <SystemInit+0x20>)
 80005b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	e000ed00 	.word	0xe000ed00

080005d0 <MX_TIM6_Init>:

/* USER CODE END 0 */

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80005e0:	4b14      	ldr	r3, [pc, #80]	; (8000634 <MX_TIM6_Init+0x64>)
 80005e2:	4a15      	ldr	r2, [pc, #84]	; (8000638 <MX_TIM6_Init+0x68>)
 80005e4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 96;
 80005e6:	4b13      	ldr	r3, [pc, #76]	; (8000634 <MX_TIM6_Init+0x64>)
 80005e8:	2260      	movs	r2, #96	; 0x60
 80005ea:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ec:	4b11      	ldr	r3, [pc, #68]	; (8000634 <MX_TIM6_Init+0x64>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 80005f2:	4b10      	ldr	r3, [pc, #64]	; (8000634 <MX_TIM6_Init+0x64>)
 80005f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005f8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <MX_TIM6_Init+0x64>)
 80005fc:	2280      	movs	r2, #128	; 0x80
 80005fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000600:	480c      	ldr	r0, [pc, #48]	; (8000634 <MX_TIM6_Init+0x64>)
 8000602:	f001 fcad 	bl	8001f60 <HAL_TIM_Base_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800060c:	f7ff ff46 	bl	800049c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	4619      	mov	r1, r3
 800061c:	4805      	ldr	r0, [pc, #20]	; (8000634 <MX_TIM6_Init+0x64>)
 800061e:	f001 fd95 	bl	800214c <HAL_TIMEx_MasterConfigSynchronization>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000628:	f7ff ff38 	bl	800049c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800062c:	bf00      	nop
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	2000031c 	.word	0x2000031c
 8000638:	40001000 	.word	0x40001000

0800063c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a0d      	ldr	r2, [pc, #52]	; (8000680 <HAL_TIM_Base_MspInit+0x44>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d113      	bne.n	8000676 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800064e:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <HAL_TIM_Base_MspInit+0x48>)
 8000650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000652:	4a0c      	ldr	r2, [pc, #48]	; (8000684 <HAL_TIM_Base_MspInit+0x48>)
 8000654:	f043 0310 	orr.w	r3, r3, #16
 8000658:	6593      	str	r3, [r2, #88]	; 0x58
 800065a:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <HAL_TIM_Base_MspInit+0x48>)
 800065c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800065e:	f003 0310 	and.w	r3, r3, #16
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	2100      	movs	r1, #0
 800066a:	2036      	movs	r0, #54	; 0x36
 800066c:	f000 f9a3 	bl	80009b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000670:	2036      	movs	r0, #54	; 0x36
 8000672:	f000 f9ba 	bl	80009ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40001000 	.word	0x40001000
 8000684:	40021000 	.word	0x40021000

08000688 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000688:	480d      	ldr	r0, [pc, #52]	; (80006c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800068a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800068c:	480d      	ldr	r0, [pc, #52]	; (80006c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800068e:	490e      	ldr	r1, [pc, #56]	; (80006c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000690:	4a0e      	ldr	r2, [pc, #56]	; (80006cc <LoopForever+0xe>)
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000694:	e002      	b.n	800069c <LoopCopyDataInit>

08000696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069a:	3304      	adds	r3, #4

0800069c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800069c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800069e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a0:	d3f9      	bcc.n	8000696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a2:	4a0b      	ldr	r2, [pc, #44]	; (80006d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006a4:	4c0b      	ldr	r4, [pc, #44]	; (80006d4 <LoopForever+0x16>)
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a8:	e001      	b.n	80006ae <LoopFillZerobss>

080006aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ac:	3204      	adds	r2, #4

080006ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b0:	d3fb      	bcc.n	80006aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006b2:	f7ff ff7b 	bl	80005ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006b6:	f001 fe1b 	bl	80022f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006ba:	f7ff fdad 	bl	8000218 <main>

080006be <LoopForever>:

LoopForever:
    b LoopForever
 80006be:	e7fe      	b.n	80006be <LoopForever>
  ldr   r0, =_estack
 80006c0:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80006c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006cc:	08002368 	.word	0x08002368
  ldr r2, =_sbss
 80006d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006d4:	2000036c 	.word	0x2000036c

080006d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006d8:	e7fe      	b.n	80006d8 <ADC1_2_IRQHandler>

080006da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	b082      	sub	sp, #8
 80006de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006e0:	2300      	movs	r3, #0
 80006e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006e4:	2003      	movs	r0, #3
 80006e6:	f000 f95b 	bl	80009a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006ea:	200f      	movs	r0, #15
 80006ec:	f000 f80e 	bl	800070c <HAL_InitTick>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d002      	beq.n	80006fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
 80006f8:	71fb      	strb	r3, [r7, #7]
 80006fa:	e001      	b.n	8000700 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006fc:	f7ff fed4 	bl	80004a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000700:	79fb      	ldrb	r3, [r7, #7]

}
 8000702:	4618      	mov	r0, r3
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000714:	2300      	movs	r3, #0
 8000716:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000718:	4b16      	ldr	r3, [pc, #88]	; (8000774 <HAL_InitTick+0x68>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d022      	beq.n	8000766 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000720:	4b15      	ldr	r3, [pc, #84]	; (8000778 <HAL_InitTick+0x6c>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4b13      	ldr	r3, [pc, #76]	; (8000774 <HAL_InitTick+0x68>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800072c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000730:	fbb2 f3f3 	udiv	r3, r2, r3
 8000734:	4618      	mov	r0, r3
 8000736:	f000 f966 	bl	8000a06 <HAL_SYSTICK_Config>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d10f      	bne.n	8000760 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b0f      	cmp	r3, #15
 8000744:	d809      	bhi.n	800075a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000746:	2200      	movs	r2, #0
 8000748:	6879      	ldr	r1, [r7, #4]
 800074a:	f04f 30ff 	mov.w	r0, #4294967295
 800074e:	f000 f932 	bl	80009b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000752:	4a0a      	ldr	r2, [pc, #40]	; (800077c <HAL_InitTick+0x70>)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	6013      	str	r3, [r2, #0]
 8000758:	e007      	b.n	800076a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800075a:	2301      	movs	r3, #1
 800075c:	73fb      	strb	r3, [r7, #15]
 800075e:	e004      	b.n	800076a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000760:	2301      	movs	r3, #1
 8000762:	73fb      	strb	r3, [r7, #15]
 8000764:	e001      	b.n	800076a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000766:	2301      	movs	r3, #1
 8000768:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800076a:	7bfb      	ldrb	r3, [r7, #15]
}
 800076c:	4618      	mov	r0, r3
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000008 	.word	0x20000008
 8000778:	20000000 	.word	0x20000000
 800077c:	20000004 	.word	0x20000004

08000780 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <HAL_IncTick+0x1c>)
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <HAL_IncTick+0x20>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4413      	add	r3, r2
 800078e:	4a03      	ldr	r2, [pc, #12]	; (800079c <HAL_IncTick+0x1c>)
 8000790:	6013      	str	r3, [r2, #0]
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	20000368 	.word	0x20000368
 80007a0:	20000008 	.word	0x20000008

080007a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  return uwTick;
 80007a8:	4b03      	ldr	r3, [pc, #12]	; (80007b8 <HAL_GetTick+0x14>)
 80007aa:	681b      	ldr	r3, [r3, #0]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	20000368 	.word	0x20000368

080007bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007c4:	f7ff ffee 	bl	80007a4 <HAL_GetTick>
 80007c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007d4:	d004      	beq.n	80007e0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <HAL_Delay+0x40>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	4413      	add	r3, r2
 80007de:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007e0:	bf00      	nop
 80007e2:	f7ff ffdf 	bl	80007a4 <HAL_GetTick>
 80007e6:	4602      	mov	r2, r0
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	1ad3      	subs	r3, r2, r3
 80007ec:	68fa      	ldr	r2, [r7, #12]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d8f7      	bhi.n	80007e2 <HAL_Delay+0x26>
  {
  }
}
 80007f2:	bf00      	nop
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000008 	.word	0x20000008

08000800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f003 0307 	and.w	r3, r3, #7
 800080e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <__NVIC_SetPriorityGrouping+0x44>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800081c:	4013      	ands	r3, r2
 800081e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800082c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000832:	4a04      	ldr	r2, [pc, #16]	; (8000844 <__NVIC_SetPriorityGrouping+0x44>)
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	60d3      	str	r3, [r2, #12]
}
 8000838:	bf00      	nop
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <__NVIC_GetPriorityGrouping+0x18>)
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	0a1b      	lsrs	r3, r3, #8
 8000852:	f003 0307 	and.w	r3, r3, #7
}
 8000856:	4618      	mov	r0, r3
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800086e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000872:	2b00      	cmp	r3, #0
 8000874:	db0b      	blt.n	800088e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	f003 021f 	and.w	r2, r3, #31
 800087c:	4907      	ldr	r1, [pc, #28]	; (800089c <__NVIC_EnableIRQ+0x38>)
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	095b      	lsrs	r3, r3, #5
 8000884:	2001      	movs	r0, #1
 8000886:	fa00 f202 	lsl.w	r2, r0, r2
 800088a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000e100 	.word	0xe000e100

080008a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	6039      	str	r1, [r7, #0]
 80008aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	db0a      	blt.n	80008ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	b2da      	uxtb	r2, r3
 80008b8:	490c      	ldr	r1, [pc, #48]	; (80008ec <__NVIC_SetPriority+0x4c>)
 80008ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008be:	0112      	lsls	r2, r2, #4
 80008c0:	b2d2      	uxtb	r2, r2
 80008c2:	440b      	add	r3, r1
 80008c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c8:	e00a      	b.n	80008e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	4908      	ldr	r1, [pc, #32]	; (80008f0 <__NVIC_SetPriority+0x50>)
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	f003 030f 	and.w	r3, r3, #15
 80008d6:	3b04      	subs	r3, #4
 80008d8:	0112      	lsls	r2, r2, #4
 80008da:	b2d2      	uxtb	r2, r2
 80008dc:	440b      	add	r3, r1
 80008de:	761a      	strb	r2, [r3, #24]
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	e000e100 	.word	0xe000e100
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b089      	sub	sp, #36	; 0x24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	f003 0307 	and.w	r3, r3, #7
 8000906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	f1c3 0307 	rsb	r3, r3, #7
 800090e:	2b04      	cmp	r3, #4
 8000910:	bf28      	it	cs
 8000912:	2304      	movcs	r3, #4
 8000914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	3304      	adds	r3, #4
 800091a:	2b06      	cmp	r3, #6
 800091c:	d902      	bls.n	8000924 <NVIC_EncodePriority+0x30>
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	3b03      	subs	r3, #3
 8000922:	e000      	b.n	8000926 <NVIC_EncodePriority+0x32>
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000928:	f04f 32ff 	mov.w	r2, #4294967295
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	43da      	mvns	r2, r3
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	401a      	ands	r2, r3
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800093c:	f04f 31ff 	mov.w	r1, #4294967295
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	fa01 f303 	lsl.w	r3, r1, r3
 8000946:	43d9      	mvns	r1, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800094c:	4313      	orrs	r3, r2
         );
}
 800094e:	4618      	mov	r0, r3
 8000950:	3724      	adds	r7, #36	; 0x24
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
	...

0800095c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3b01      	subs	r3, #1
 8000968:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800096c:	d301      	bcc.n	8000972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800096e:	2301      	movs	r3, #1
 8000970:	e00f      	b.n	8000992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000972:	4a0a      	ldr	r2, [pc, #40]	; (800099c <SysTick_Config+0x40>)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3b01      	subs	r3, #1
 8000978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800097a:	210f      	movs	r1, #15
 800097c:	f04f 30ff 	mov.w	r0, #4294967295
 8000980:	f7ff ff8e 	bl	80008a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <SysTick_Config+0x40>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800098a:	4b04      	ldr	r3, [pc, #16]	; (800099c <SysTick_Config+0x40>)
 800098c:	2207      	movs	r2, #7
 800098e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	e000e010 	.word	0xe000e010

080009a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f7ff ff29 	bl	8000800 <__NVIC_SetPriorityGrouping>
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b086      	sub	sp, #24
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	4603      	mov	r3, r0
 80009be:	60b9      	str	r1, [r7, #8]
 80009c0:	607a      	str	r2, [r7, #4]
 80009c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009c4:	f7ff ff40 	bl	8000848 <__NVIC_GetPriorityGrouping>
 80009c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	68b9      	ldr	r1, [r7, #8]
 80009ce:	6978      	ldr	r0, [r7, #20]
 80009d0:	f7ff ff90 	bl	80008f4 <NVIC_EncodePriority>
 80009d4:	4602      	mov	r2, r0
 80009d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009da:	4611      	mov	r1, r2
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff ff5f 	bl	80008a0 <__NVIC_SetPriority>
}
 80009e2:	bf00      	nop
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b082      	sub	sp, #8
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	4603      	mov	r3, r0
 80009f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff ff33 	bl	8000864 <__NVIC_EnableIRQ>
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff ffa4 	bl	800095c <SysTick_Config>
 8000a14:	4603      	mov	r3, r0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b087      	sub	sp, #28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000a2e:	e15a      	b.n	8000ce6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	2101      	movs	r1, #1
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	f000 814c 	beq.w	8000ce0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f003 0303 	and.w	r3, r3, #3
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d005      	beq.n	8000a60 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	d130      	bne.n	8000ac2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	2203      	movs	r2, #3
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	43db      	mvns	r3, r3
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	4013      	ands	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	68da      	ldr	r2, [r3, #12]
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a96:	2201      	movs	r2, #1
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	43db      	mvns	r3, r3
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	091b      	lsrs	r3, r3, #4
 8000aac:	f003 0201 	and.w	r2, r3, #1
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f003 0303 	and.w	r3, r3, #3
 8000aca:	2b03      	cmp	r3, #3
 8000acc:	d017      	beq.n	8000afe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	68db      	ldr	r3, [r3, #12]
 8000ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	2203      	movs	r2, #3
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	689a      	ldr	r2, [r3, #8]
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f003 0303 	and.w	r3, r3, #3
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d123      	bne.n	8000b52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	08da      	lsrs	r2, r3, #3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	3208      	adds	r2, #8
 8000b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	220f      	movs	r2, #15
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43db      	mvns	r3, r3
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	691a      	ldr	r2, [r3, #16]
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	f003 0307 	and.w	r3, r3, #7
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	08da      	lsrs	r2, r3, #3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3208      	adds	r2, #8
 8000b4c:	6939      	ldr	r1, [r7, #16]
 8000b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	2203      	movs	r2, #3
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	43db      	mvns	r3, r3
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	4013      	ands	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f003 0203 	and.w	r2, r3, #3
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	f000 80a6 	beq.w	8000ce0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b94:	4b5b      	ldr	r3, [pc, #364]	; (8000d04 <HAL_GPIO_Init+0x2e4>)
 8000b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b98:	4a5a      	ldr	r2, [pc, #360]	; (8000d04 <HAL_GPIO_Init+0x2e4>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	6613      	str	r3, [r2, #96]	; 0x60
 8000ba0:	4b58      	ldr	r3, [pc, #352]	; (8000d04 <HAL_GPIO_Init+0x2e4>)
 8000ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000bac:	4a56      	ldr	r2, [pc, #344]	; (8000d08 <HAL_GPIO_Init+0x2e8>)
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	089b      	lsrs	r3, r3, #2
 8000bb2:	3302      	adds	r3, #2
 8000bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	f003 0303 	and.w	r3, r3, #3
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	220f      	movs	r2, #15
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bd6:	d01f      	beq.n	8000c18 <HAL_GPIO_Init+0x1f8>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a4c      	ldr	r2, [pc, #304]	; (8000d0c <HAL_GPIO_Init+0x2ec>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d019      	beq.n	8000c14 <HAL_GPIO_Init+0x1f4>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a4b      	ldr	r2, [pc, #300]	; (8000d10 <HAL_GPIO_Init+0x2f0>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d013      	beq.n	8000c10 <HAL_GPIO_Init+0x1f0>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a4a      	ldr	r2, [pc, #296]	; (8000d14 <HAL_GPIO_Init+0x2f4>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d00d      	beq.n	8000c0c <HAL_GPIO_Init+0x1ec>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a49      	ldr	r2, [pc, #292]	; (8000d18 <HAL_GPIO_Init+0x2f8>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d007      	beq.n	8000c08 <HAL_GPIO_Init+0x1e8>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a48      	ldr	r2, [pc, #288]	; (8000d1c <HAL_GPIO_Init+0x2fc>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d101      	bne.n	8000c04 <HAL_GPIO_Init+0x1e4>
 8000c00:	2305      	movs	r3, #5
 8000c02:	e00a      	b.n	8000c1a <HAL_GPIO_Init+0x1fa>
 8000c04:	2306      	movs	r3, #6
 8000c06:	e008      	b.n	8000c1a <HAL_GPIO_Init+0x1fa>
 8000c08:	2304      	movs	r3, #4
 8000c0a:	e006      	b.n	8000c1a <HAL_GPIO_Init+0x1fa>
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	e004      	b.n	8000c1a <HAL_GPIO_Init+0x1fa>
 8000c10:	2302      	movs	r3, #2
 8000c12:	e002      	b.n	8000c1a <HAL_GPIO_Init+0x1fa>
 8000c14:	2301      	movs	r3, #1
 8000c16:	e000      	b.n	8000c1a <HAL_GPIO_Init+0x1fa>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	697a      	ldr	r2, [r7, #20]
 8000c1c:	f002 0203 	and.w	r2, r2, #3
 8000c20:	0092      	lsls	r2, r2, #2
 8000c22:	4093      	lsls	r3, r2
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c2a:	4937      	ldr	r1, [pc, #220]	; (8000d08 <HAL_GPIO_Init+0x2e8>)
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	089b      	lsrs	r3, r3, #2
 8000c30:	3302      	adds	r3, #2
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c38:	4b39      	ldr	r3, [pc, #228]	; (8000d20 <HAL_GPIO_Init+0x300>)
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	43db      	mvns	r3, r3
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d003      	beq.n	8000c5c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c5c:	4a30      	ldr	r2, [pc, #192]	; (8000d20 <HAL_GPIO_Init+0x300>)
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c62:	4b2f      	ldr	r3, [pc, #188]	; (8000d20 <HAL_GPIO_Init+0x300>)
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d003      	beq.n	8000c86 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c86:	4a26      	ldr	r2, [pc, #152]	; (8000d20 <HAL_GPIO_Init+0x300>)
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000c8c:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <HAL_GPIO_Init+0x300>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	43db      	mvns	r3, r3
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d003      	beq.n	8000cb0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000cb0:	4a1b      	ldr	r2, [pc, #108]	; (8000d20 <HAL_GPIO_Init+0x300>)
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000cb6:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <HAL_GPIO_Init+0x300>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d003      	beq.n	8000cda <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cda:	4a11      	ldr	r2, [pc, #68]	; (8000d20 <HAL_GPIO_Init+0x300>)
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	fa22 f303 	lsr.w	r3, r2, r3
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	f47f ae9d 	bne.w	8000a30 <HAL_GPIO_Init+0x10>
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	bf00      	nop
 8000cfa:	371c      	adds	r7, #28
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	40021000 	.word	0x40021000
 8000d08:	40010000 	.word	0x40010000
 8000d0c:	48000400 	.word	0x48000400
 8000d10:	48000800 	.word	0x48000800
 8000d14:	48000c00 	.word	0x48000c00
 8000d18:	48001000 	.word	0x48001000
 8000d1c:	48001400 	.word	0x48001400
 8000d20:	40010400 	.word	0x40010400

08000d24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	807b      	strh	r3, [r7, #2]
 8000d30:	4613      	mov	r3, r2
 8000d32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d34:	787b      	ldrb	r3, [r7, #1]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d003      	beq.n	8000d42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d3a:	887a      	ldrh	r2, [r7, #2]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d40:	e002      	b.n	8000d48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d42:	887a      	ldrh	r2, [r7, #2]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	695b      	ldr	r3, [r3, #20]
 8000d64:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d66:	887a      	ldrh	r2, [r7, #2]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	041a      	lsls	r2, r3, #16
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	43d9      	mvns	r1, r3
 8000d72:	887b      	ldrh	r3, [r7, #2]
 8000d74:	400b      	ands	r3, r1
 8000d76:	431a      	orrs	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	619a      	str	r2, [r3, #24]
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d8a:	b08b      	sub	sp, #44	; 0x2c
 8000d8c:	af06      	add	r7, sp, #24
 8000d8e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d101      	bne.n	8000d9a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e0d7      	b.n	8000f4a <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d106      	bne.n	8000db4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff fb9e 	bl	80004f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2203      	movs	r2, #3
 8000db8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f001 fa51 	bl	8002268 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	73fb      	strb	r3, [r7, #15]
 8000dca:	e04c      	b.n	8000e66 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	1c5a      	adds	r2, r3, #1
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4413      	add	r3, r2
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	440b      	add	r3, r1
 8000ddc:	3301      	adds	r3, #1
 8000dde:	2201      	movs	r2, #1
 8000de0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	6879      	ldr	r1, [r7, #4]
 8000de6:	1c5a      	adds	r2, r3, #1
 8000de8:	4613      	mov	r3, r2
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	4413      	add	r3, r2
 8000dee:	00db      	lsls	r3, r3, #3
 8000df0:	440b      	add	r3, r1
 8000df2:	7bfa      	ldrb	r2, [r7, #15]
 8000df4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000df6:	7bfa      	ldrb	r2, [r7, #15]
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
 8000dfa:	b298      	uxth	r0, r3
 8000dfc:	6879      	ldr	r1, [r7, #4]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	4413      	add	r3, r2
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	440b      	add	r3, r1
 8000e08:	3336      	adds	r3, #54	; 0x36
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	6879      	ldr	r1, [r7, #4]
 8000e12:	1c5a      	adds	r2, r3, #1
 8000e14:	4613      	mov	r3, r2
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	4413      	add	r3, r2
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	440b      	add	r3, r1
 8000e1e:	3303      	adds	r3, #3
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e24:	7bfa      	ldrb	r2, [r7, #15]
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	4413      	add	r3, r2
 8000e2e:	00db      	lsls	r3, r3, #3
 8000e30:	440b      	add	r3, r1
 8000e32:	3338      	adds	r3, #56	; 0x38
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e38:	7bfa      	ldrb	r2, [r7, #15]
 8000e3a:	6879      	ldr	r1, [r7, #4]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	4413      	add	r3, r2
 8000e42:	00db      	lsls	r3, r3, #3
 8000e44:	440b      	add	r3, r1
 8000e46:	333c      	adds	r3, #60	; 0x3c
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e4c:	7bfa      	ldrb	r2, [r7, #15]
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	4613      	mov	r3, r2
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	4413      	add	r3, r2
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	440b      	add	r3, r1
 8000e5a:	3340      	adds	r3, #64	; 0x40
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	3301      	adds	r3, #1
 8000e64:	73fb      	strb	r3, [r7, #15]
 8000e66:	7bfa      	ldrb	r2, [r7, #15]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d3ad      	bcc.n	8000dcc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e70:	2300      	movs	r3, #0
 8000e72:	73fb      	strb	r3, [r7, #15]
 8000e74:	e044      	b.n	8000f00 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000e76:	7bfa      	ldrb	r2, [r7, #15]
 8000e78:	6879      	ldr	r1, [r7, #4]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	440b      	add	r3, r1
 8000e84:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000e8c:	7bfa      	ldrb	r2, [r7, #15]
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	4613      	mov	r3, r2
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4413      	add	r3, r2
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	440b      	add	r3, r1
 8000e9a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000e9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ea0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000ea2:	7bfa      	ldrb	r2, [r7, #15]
 8000ea4:	6879      	ldr	r1, [r7, #4]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	4413      	add	r3, r2
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	440b      	add	r3, r1
 8000eb0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000eb8:	7bfa      	ldrb	r2, [r7, #15]
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	4413      	add	r3, r2
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	440b      	add	r3, r1
 8000ec6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ece:	7bfa      	ldrb	r2, [r7, #15]
 8000ed0:	6879      	ldr	r1, [r7, #4]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4413      	add	r3, r2
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	440b      	add	r3, r1
 8000edc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ee4:	7bfa      	ldrb	r2, [r7, #15]
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4413      	add	r3, r2
 8000eee:	00db      	lsls	r3, r3, #3
 8000ef0:	440b      	add	r3, r1
 8000ef2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	3301      	adds	r3, #1
 8000efe:	73fb      	strb	r3, [r7, #15]
 8000f00:	7bfa      	ldrb	r2, [r7, #15]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d3b5      	bcc.n	8000e76 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	687e      	ldr	r6, [r7, #4]
 8000f12:	466d      	mov	r5, sp
 8000f14:	f106 0410 	add.w	r4, r6, #16
 8000f18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f1c:	6823      	ldr	r3, [r4, #0]
 8000f1e:	602b      	str	r3, [r5, #0]
 8000f20:	1d33      	adds	r3, r6, #4
 8000f22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f24:	6838      	ldr	r0, [r7, #0]
 8000f26:	f001 f9ba 	bl	800229e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2201      	movs	r2, #1
 8000f36:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	69db      	ldr	r3, [r3, #28]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d102      	bne.n	8000f48 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f000 f805 	bl	8000f52 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f52 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b085      	sub	sp, #20
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2201      	movs	r2, #1
 8000f64:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	f043 0302 	orr.w	r3, r3, #2
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
	...

08000fa8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d141      	bne.n	800103a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fb6:	4b4b      	ldr	r3, [pc, #300]	; (80010e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fc2:	d131      	bne.n	8001028 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000fc4:	4b47      	ldr	r3, [pc, #284]	; (80010e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fca:	4a46      	ldr	r2, [pc, #280]	; (80010e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fd4:	4b43      	ldr	r3, [pc, #268]	; (80010e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fdc:	4a41      	ldr	r2, [pc, #260]	; (80010e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fe2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000fe4:	4b40      	ldr	r3, [pc, #256]	; (80010e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2232      	movs	r2, #50	; 0x32
 8000fea:	fb02 f303 	mul.w	r3, r2, r3
 8000fee:	4a3f      	ldr	r2, [pc, #252]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff4:	0c9b      	lsrs	r3, r3, #18
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ffa:	e002      	b.n	8001002 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001002:	4b38      	ldr	r3, [pc, #224]	; (80010e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800100a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800100e:	d102      	bne.n	8001016 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1f2      	bne.n	8000ffc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001016:	4b33      	ldr	r3, [pc, #204]	; (80010e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800101e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001022:	d158      	bne.n	80010d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e057      	b.n	80010d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001028:	4b2e      	ldr	r3, [pc, #184]	; (80010e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800102a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800102e:	4a2d      	ldr	r2, [pc, #180]	; (80010e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001034:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001038:	e04d      	b.n	80010d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001040:	d141      	bne.n	80010c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001042:	4b28      	ldr	r3, [pc, #160]	; (80010e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800104a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800104e:	d131      	bne.n	80010b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001050:	4b24      	ldr	r3, [pc, #144]	; (80010e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001052:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001056:	4a23      	ldr	r2, [pc, #140]	; (80010e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800105c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001060:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001068:	4a1e      	ldr	r2, [pc, #120]	; (80010e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800106a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800106e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001070:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2232      	movs	r2, #50	; 0x32
 8001076:	fb02 f303 	mul.w	r3, r2, r3
 800107a:	4a1c      	ldr	r2, [pc, #112]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800107c:	fba2 2303 	umull	r2, r3, r2, r3
 8001080:	0c9b      	lsrs	r3, r3, #18
 8001082:	3301      	adds	r3, #1
 8001084:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001086:	e002      	b.n	800108e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	3b01      	subs	r3, #1
 800108c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800108e:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800109a:	d102      	bne.n	80010a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1f2      	bne.n	8001088 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ae:	d112      	bne.n	80010d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80010b0:	2303      	movs	r3, #3
 80010b2:	e011      	b.n	80010d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010b4:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010ba:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80010c4:	e007      	b.n	80010d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010ce:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010d4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	40007000 	.word	0x40007000
 80010e8:	20000000 	.word	0x20000000
 80010ec:	431bde83 	.word	0x431bde83

080010f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e306      	b.n	8001710 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	2b00      	cmp	r3, #0
 800110c:	d075      	beq.n	80011fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800110e:	4b97      	ldr	r3, [pc, #604]	; (800136c <HAL_RCC_OscConfig+0x27c>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 030c 	and.w	r3, r3, #12
 8001116:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001118:	4b94      	ldr	r3, [pc, #592]	; (800136c <HAL_RCC_OscConfig+0x27c>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	f003 0303 	and.w	r3, r3, #3
 8001120:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	2b0c      	cmp	r3, #12
 8001126:	d102      	bne.n	800112e <HAL_RCC_OscConfig+0x3e>
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	2b03      	cmp	r3, #3
 800112c:	d002      	beq.n	8001134 <HAL_RCC_OscConfig+0x44>
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	2b08      	cmp	r3, #8
 8001132:	d10b      	bne.n	800114c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001134:	4b8d      	ldr	r3, [pc, #564]	; (800136c <HAL_RCC_OscConfig+0x27c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d05b      	beq.n	80011f8 <HAL_RCC_OscConfig+0x108>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d157      	bne.n	80011f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e2e1      	b.n	8001710 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001154:	d106      	bne.n	8001164 <HAL_RCC_OscConfig+0x74>
 8001156:	4b85      	ldr	r3, [pc, #532]	; (800136c <HAL_RCC_OscConfig+0x27c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a84      	ldr	r2, [pc, #528]	; (800136c <HAL_RCC_OscConfig+0x27c>)
 800115c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	e01d      	b.n	80011a0 <HAL_RCC_OscConfig+0xb0>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800116c:	d10c      	bne.n	8001188 <HAL_RCC_OscConfig+0x98>
 800116e:	4b7f      	ldr	r3, [pc, #508]	; (800136c <HAL_RCC_OscConfig+0x27c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a7e      	ldr	r2, [pc, #504]	; (800136c <HAL_RCC_OscConfig+0x27c>)
 8001174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	4b7c      	ldr	r3, [pc, #496]	; (800136c <HAL_RCC_OscConfig+0x27c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a7b      	ldr	r2, [pc, #492]	; (800136c <HAL_RCC_OscConfig+0x27c>)
 8001180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	e00b      	b.n	80011a0 <HAL_RCC_OscConfig+0xb0>
 8001188:	4b78      	ldr	r3, [pc, #480]	; (800136c <HAL_RCC_OscConfig+0x27c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a77      	ldr	r2, [pc, #476]	; (800136c <HAL_RCC_OscConfig+0x27c>)
 800118e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	4b75      	ldr	r3, [pc, #468]	; (800136c <HAL_RCC_OscConfig+0x27c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a74      	ldr	r2, [pc, #464]	; (800136c <HAL_RCC_OscConfig+0x27c>)
 800119a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800119e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d013      	beq.n	80011d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a8:	f7ff fafc 	bl	80007a4 <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b0:	f7ff faf8 	bl	80007a4 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b64      	cmp	r3, #100	; 0x64
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e2a6      	b.n	8001710 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011c2:	4b6a      	ldr	r3, [pc, #424]	; (800136c <HAL_RCC_OscConfig+0x27c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0f0      	beq.n	80011b0 <HAL_RCC_OscConfig+0xc0>
 80011ce:	e014      	b.n	80011fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d0:	f7ff fae8 	bl	80007a4 <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d8:	f7ff fae4 	bl	80007a4 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b64      	cmp	r3, #100	; 0x64
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e292      	b.n	8001710 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011ea:	4b60      	ldr	r3, [pc, #384]	; (800136c <HAL_RCC_OscConfig+0x27c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f0      	bne.n	80011d8 <HAL_RCC_OscConfig+0xe8>
 80011f6:	e000      	b.n	80011fa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d075      	beq.n	80012f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001206:	4b59      	ldr	r3, [pc, #356]	; (800136c <HAL_RCC_OscConfig+0x27c>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 030c 	and.w	r3, r3, #12
 800120e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001210:	4b56      	ldr	r3, [pc, #344]	; (800136c <HAL_RCC_OscConfig+0x27c>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	2b0c      	cmp	r3, #12
 800121e:	d102      	bne.n	8001226 <HAL_RCC_OscConfig+0x136>
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	2b02      	cmp	r3, #2
 8001224:	d002      	beq.n	800122c <HAL_RCC_OscConfig+0x13c>
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	2b04      	cmp	r3, #4
 800122a:	d11f      	bne.n	800126c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800122c:	4b4f      	ldr	r3, [pc, #316]	; (800136c <HAL_RCC_OscConfig+0x27c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001234:	2b00      	cmp	r3, #0
 8001236:	d005      	beq.n	8001244 <HAL_RCC_OscConfig+0x154>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d101      	bne.n	8001244 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e265      	b.n	8001710 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001244:	4b49      	ldr	r3, [pc, #292]	; (800136c <HAL_RCC_OscConfig+0x27c>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	691b      	ldr	r3, [r3, #16]
 8001250:	061b      	lsls	r3, r3, #24
 8001252:	4946      	ldr	r1, [pc, #280]	; (800136c <HAL_RCC_OscConfig+0x27c>)
 8001254:	4313      	orrs	r3, r2
 8001256:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001258:	4b45      	ldr	r3, [pc, #276]	; (8001370 <HAL_RCC_OscConfig+0x280>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fa55 	bl	800070c <HAL_InitTick>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d043      	beq.n	80012f0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e251      	b.n	8001710 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d023      	beq.n	80012bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001274:	4b3d      	ldr	r3, [pc, #244]	; (800136c <HAL_RCC_OscConfig+0x27c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a3c      	ldr	r2, [pc, #240]	; (800136c <HAL_RCC_OscConfig+0x27c>)
 800127a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800127e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001280:	f7ff fa90 	bl	80007a4 <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001288:	f7ff fa8c 	bl	80007a4 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e23a      	b.n	8001710 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800129a:	4b34      	ldr	r3, [pc, #208]	; (800136c <HAL_RCC_OscConfig+0x27c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0f0      	beq.n	8001288 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a6:	4b31      	ldr	r3, [pc, #196]	; (800136c <HAL_RCC_OscConfig+0x27c>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	061b      	lsls	r3, r3, #24
 80012b4:	492d      	ldr	r1, [pc, #180]	; (800136c <HAL_RCC_OscConfig+0x27c>)
 80012b6:	4313      	orrs	r3, r2
 80012b8:	604b      	str	r3, [r1, #4]
 80012ba:	e01a      	b.n	80012f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012bc:	4b2b      	ldr	r3, [pc, #172]	; (800136c <HAL_RCC_OscConfig+0x27c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a2a      	ldr	r2, [pc, #168]	; (800136c <HAL_RCC_OscConfig+0x27c>)
 80012c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c8:	f7ff fa6c 	bl	80007a4 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012d0:	f7ff fa68 	bl	80007a4 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e216      	b.n	8001710 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012e2:	4b22      	ldr	r3, [pc, #136]	; (800136c <HAL_RCC_OscConfig+0x27c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1f0      	bne.n	80012d0 <HAL_RCC_OscConfig+0x1e0>
 80012ee:	e000      	b.n	80012f2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0308 	and.w	r3, r3, #8
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d041      	beq.n	8001382 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d01c      	beq.n	8001340 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001306:	4b19      	ldr	r3, [pc, #100]	; (800136c <HAL_RCC_OscConfig+0x27c>)
 8001308:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800130c:	4a17      	ldr	r2, [pc, #92]	; (800136c <HAL_RCC_OscConfig+0x27c>)
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001316:	f7ff fa45 	bl	80007a4 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800131e:	f7ff fa41 	bl	80007a4 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e1ef      	b.n	8001710 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001330:	4b0e      	ldr	r3, [pc, #56]	; (800136c <HAL_RCC_OscConfig+0x27c>)
 8001332:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0ef      	beq.n	800131e <HAL_RCC_OscConfig+0x22e>
 800133e:	e020      	b.n	8001382 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001340:	4b0a      	ldr	r3, [pc, #40]	; (800136c <HAL_RCC_OscConfig+0x27c>)
 8001342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001346:	4a09      	ldr	r2, [pc, #36]	; (800136c <HAL_RCC_OscConfig+0x27c>)
 8001348:	f023 0301 	bic.w	r3, r3, #1
 800134c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001350:	f7ff fa28 	bl	80007a4 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001356:	e00d      	b.n	8001374 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001358:	f7ff fa24 	bl	80007a4 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d906      	bls.n	8001374 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e1d2      	b.n	8001710 <HAL_RCC_OscConfig+0x620>
 800136a:	bf00      	nop
 800136c:	40021000 	.word	0x40021000
 8001370:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001374:	4b8c      	ldr	r3, [pc, #560]	; (80015a8 <HAL_RCC_OscConfig+0x4b8>)
 8001376:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1ea      	bne.n	8001358 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 80a6 	beq.w	80014dc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001390:	2300      	movs	r3, #0
 8001392:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001394:	4b84      	ldr	r3, [pc, #528]	; (80015a8 <HAL_RCC_OscConfig+0x4b8>)
 8001396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <HAL_RCC_OscConfig+0x2b4>
 80013a0:	2301      	movs	r3, #1
 80013a2:	e000      	b.n	80013a6 <HAL_RCC_OscConfig+0x2b6>
 80013a4:	2300      	movs	r3, #0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00d      	beq.n	80013c6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013aa:	4b7f      	ldr	r3, [pc, #508]	; (80015a8 <HAL_RCC_OscConfig+0x4b8>)
 80013ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ae:	4a7e      	ldr	r2, [pc, #504]	; (80015a8 <HAL_RCC_OscConfig+0x4b8>)
 80013b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b4:	6593      	str	r3, [r2, #88]	; 0x58
 80013b6:	4b7c      	ldr	r3, [pc, #496]	; (80015a8 <HAL_RCC_OscConfig+0x4b8>)
 80013b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013c2:	2301      	movs	r3, #1
 80013c4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013c6:	4b79      	ldr	r3, [pc, #484]	; (80015ac <HAL_RCC_OscConfig+0x4bc>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d118      	bne.n	8001404 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013d2:	4b76      	ldr	r3, [pc, #472]	; (80015ac <HAL_RCC_OscConfig+0x4bc>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a75      	ldr	r2, [pc, #468]	; (80015ac <HAL_RCC_OscConfig+0x4bc>)
 80013d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013de:	f7ff f9e1 	bl	80007a4 <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013e4:	e008      	b.n	80013f8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013e6:	f7ff f9dd 	bl	80007a4 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e18b      	b.n	8001710 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013f8:	4b6c      	ldr	r3, [pc, #432]	; (80015ac <HAL_RCC_OscConfig+0x4bc>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0f0      	beq.n	80013e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d108      	bne.n	800141e <HAL_RCC_OscConfig+0x32e>
 800140c:	4b66      	ldr	r3, [pc, #408]	; (80015a8 <HAL_RCC_OscConfig+0x4b8>)
 800140e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001412:	4a65      	ldr	r2, [pc, #404]	; (80015a8 <HAL_RCC_OscConfig+0x4b8>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800141c:	e024      	b.n	8001468 <HAL_RCC_OscConfig+0x378>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	2b05      	cmp	r3, #5
 8001424:	d110      	bne.n	8001448 <HAL_RCC_OscConfig+0x358>
 8001426:	4b60      	ldr	r3, [pc, #384]	; (80015a8 <HAL_RCC_OscConfig+0x4b8>)
 8001428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800142c:	4a5e      	ldr	r2, [pc, #376]	; (80015a8 <HAL_RCC_OscConfig+0x4b8>)
 800142e:	f043 0304 	orr.w	r3, r3, #4
 8001432:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001436:	4b5c      	ldr	r3, [pc, #368]	; (80015a8 <HAL_RCC_OscConfig+0x4b8>)
 8001438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800143c:	4a5a      	ldr	r2, [pc, #360]	; (80015a8 <HAL_RCC_OscConfig+0x4b8>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001446:	e00f      	b.n	8001468 <HAL_RCC_OscConfig+0x378>
 8001448:	4b57      	ldr	r3, [pc, #348]	; (80015a8 <HAL_RCC_OscConfig+0x4b8>)
 800144a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800144e:	4a56      	ldr	r2, [pc, #344]	; (80015a8 <HAL_RCC_OscConfig+0x4b8>)
 8001450:	f023 0301 	bic.w	r3, r3, #1
 8001454:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001458:	4b53      	ldr	r3, [pc, #332]	; (80015a8 <HAL_RCC_OscConfig+0x4b8>)
 800145a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800145e:	4a52      	ldr	r2, [pc, #328]	; (80015a8 <HAL_RCC_OscConfig+0x4b8>)
 8001460:	f023 0304 	bic.w	r3, r3, #4
 8001464:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d016      	beq.n	800149e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001470:	f7ff f998 	bl	80007a4 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001476:	e00a      	b.n	800148e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001478:	f7ff f994 	bl	80007a4 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	f241 3288 	movw	r2, #5000	; 0x1388
 8001486:	4293      	cmp	r3, r2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e140      	b.n	8001710 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800148e:	4b46      	ldr	r3, [pc, #280]	; (80015a8 <HAL_RCC_OscConfig+0x4b8>)
 8001490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0ed      	beq.n	8001478 <HAL_RCC_OscConfig+0x388>
 800149c:	e015      	b.n	80014ca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800149e:	f7ff f981 	bl	80007a4 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014a4:	e00a      	b.n	80014bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014a6:	f7ff f97d 	bl	80007a4 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e129      	b.n	8001710 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014bc:	4b3a      	ldr	r3, [pc, #232]	; (80015a8 <HAL_RCC_OscConfig+0x4b8>)
 80014be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1ed      	bne.n	80014a6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014ca:	7ffb      	ldrb	r3, [r7, #31]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d105      	bne.n	80014dc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014d0:	4b35      	ldr	r3, [pc, #212]	; (80015a8 <HAL_RCC_OscConfig+0x4b8>)
 80014d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d4:	4a34      	ldr	r2, [pc, #208]	; (80015a8 <HAL_RCC_OscConfig+0x4b8>)
 80014d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0320 	and.w	r3, r3, #32
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d03c      	beq.n	8001562 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d01c      	beq.n	800152a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80014f0:	4b2d      	ldr	r3, [pc, #180]	; (80015a8 <HAL_RCC_OscConfig+0x4b8>)
 80014f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014f6:	4a2c      	ldr	r2, [pc, #176]	; (80015a8 <HAL_RCC_OscConfig+0x4b8>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001500:	f7ff f950 	bl	80007a4 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001508:	f7ff f94c 	bl	80007a4 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e0fa      	b.n	8001710 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800151a:	4b23      	ldr	r3, [pc, #140]	; (80015a8 <HAL_RCC_OscConfig+0x4b8>)
 800151c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0ef      	beq.n	8001508 <HAL_RCC_OscConfig+0x418>
 8001528:	e01b      	b.n	8001562 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800152a:	4b1f      	ldr	r3, [pc, #124]	; (80015a8 <HAL_RCC_OscConfig+0x4b8>)
 800152c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001530:	4a1d      	ldr	r2, [pc, #116]	; (80015a8 <HAL_RCC_OscConfig+0x4b8>)
 8001532:	f023 0301 	bic.w	r3, r3, #1
 8001536:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800153a:	f7ff f933 	bl	80007a4 <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001542:	f7ff f92f 	bl	80007a4 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e0dd      	b.n	8001710 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001554:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <HAL_RCC_OscConfig+0x4b8>)
 8001556:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1ef      	bne.n	8001542 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 80d1 	beq.w	800170e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800156c:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <HAL_RCC_OscConfig+0x4b8>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f003 030c 	and.w	r3, r3, #12
 8001574:	2b0c      	cmp	r3, #12
 8001576:	f000 808b 	beq.w	8001690 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	2b02      	cmp	r3, #2
 8001580:	d15e      	bne.n	8001640 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <HAL_RCC_OscConfig+0x4b8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a08      	ldr	r2, [pc, #32]	; (80015a8 <HAL_RCC_OscConfig+0x4b8>)
 8001588:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800158c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158e:	f7ff f909 	bl	80007a4 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001594:	e00c      	b.n	80015b0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001596:	f7ff f905 	bl	80007a4 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d905      	bls.n	80015b0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e0b3      	b.n	8001710 <HAL_RCC_OscConfig+0x620>
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015b0:	4b59      	ldr	r3, [pc, #356]	; (8001718 <HAL_RCC_OscConfig+0x628>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1ec      	bne.n	8001596 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015bc:	4b56      	ldr	r3, [pc, #344]	; (8001718 <HAL_RCC_OscConfig+0x628>)
 80015be:	68da      	ldr	r2, [r3, #12]
 80015c0:	4b56      	ldr	r3, [pc, #344]	; (800171c <HAL_RCC_OscConfig+0x62c>)
 80015c2:	4013      	ands	r3, r2
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	6a11      	ldr	r1, [r2, #32]
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015cc:	3a01      	subs	r2, #1
 80015ce:	0112      	lsls	r2, r2, #4
 80015d0:	4311      	orrs	r1, r2
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80015d6:	0212      	lsls	r2, r2, #8
 80015d8:	4311      	orrs	r1, r2
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015de:	0852      	lsrs	r2, r2, #1
 80015e0:	3a01      	subs	r2, #1
 80015e2:	0552      	lsls	r2, r2, #21
 80015e4:	4311      	orrs	r1, r2
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015ea:	0852      	lsrs	r2, r2, #1
 80015ec:	3a01      	subs	r2, #1
 80015ee:	0652      	lsls	r2, r2, #25
 80015f0:	4311      	orrs	r1, r2
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80015f6:	06d2      	lsls	r2, r2, #27
 80015f8:	430a      	orrs	r2, r1
 80015fa:	4947      	ldr	r1, [pc, #284]	; (8001718 <HAL_RCC_OscConfig+0x628>)
 80015fc:	4313      	orrs	r3, r2
 80015fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001600:	4b45      	ldr	r3, [pc, #276]	; (8001718 <HAL_RCC_OscConfig+0x628>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a44      	ldr	r2, [pc, #272]	; (8001718 <HAL_RCC_OscConfig+0x628>)
 8001606:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800160a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800160c:	4b42      	ldr	r3, [pc, #264]	; (8001718 <HAL_RCC_OscConfig+0x628>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	4a41      	ldr	r2, [pc, #260]	; (8001718 <HAL_RCC_OscConfig+0x628>)
 8001612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001616:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001618:	f7ff f8c4 	bl	80007a4 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001620:	f7ff f8c0 	bl	80007a4 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e06e      	b.n	8001710 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001632:	4b39      	ldr	r3, [pc, #228]	; (8001718 <HAL_RCC_OscConfig+0x628>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f0      	beq.n	8001620 <HAL_RCC_OscConfig+0x530>
 800163e:	e066      	b.n	800170e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001640:	4b35      	ldr	r3, [pc, #212]	; (8001718 <HAL_RCC_OscConfig+0x628>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a34      	ldr	r2, [pc, #208]	; (8001718 <HAL_RCC_OscConfig+0x628>)
 8001646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800164a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800164c:	4b32      	ldr	r3, [pc, #200]	; (8001718 <HAL_RCC_OscConfig+0x628>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	4a31      	ldr	r2, [pc, #196]	; (8001718 <HAL_RCC_OscConfig+0x628>)
 8001652:	f023 0303 	bic.w	r3, r3, #3
 8001656:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001658:	4b2f      	ldr	r3, [pc, #188]	; (8001718 <HAL_RCC_OscConfig+0x628>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	4a2e      	ldr	r2, [pc, #184]	; (8001718 <HAL_RCC_OscConfig+0x628>)
 800165e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001666:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff f89c 	bl	80007a4 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001670:	f7ff f898 	bl	80007a4 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e046      	b.n	8001710 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001682:	4b25      	ldr	r3, [pc, #148]	; (8001718 <HAL_RCC_OscConfig+0x628>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0x580>
 800168e:	e03e      	b.n	800170e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	69db      	ldr	r3, [r3, #28]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d101      	bne.n	800169c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e039      	b.n	8001710 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800169c:	4b1e      	ldr	r3, [pc, #120]	; (8001718 <HAL_RCC_OscConfig+0x628>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	f003 0203 	and.w	r2, r3, #3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d12c      	bne.n	800170a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	3b01      	subs	r3, #1
 80016bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016be:	429a      	cmp	r2, r3
 80016c0:	d123      	bne.n	800170a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d11b      	bne.n	800170a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016dc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80016de:	429a      	cmp	r2, r3
 80016e0:	d113      	bne.n	800170a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ec:	085b      	lsrs	r3, r3, #1
 80016ee:	3b01      	subs	r3, #1
 80016f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d109      	bne.n	800170a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001700:	085b      	lsrs	r3, r3, #1
 8001702:	3b01      	subs	r3, #1
 8001704:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001706:	429a      	cmp	r2, r3
 8001708:	d001      	beq.n	800170e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e000      	b.n	8001710 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3720      	adds	r7, #32
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40021000 	.word	0x40021000
 800171c:	019f800c 	.word	0x019f800c

08001720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e11e      	b.n	8001976 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001738:	4b91      	ldr	r3, [pc, #580]	; (8001980 <HAL_RCC_ClockConfig+0x260>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 030f 	and.w	r3, r3, #15
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	d910      	bls.n	8001768 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001746:	4b8e      	ldr	r3, [pc, #568]	; (8001980 <HAL_RCC_ClockConfig+0x260>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f023 020f 	bic.w	r2, r3, #15
 800174e:	498c      	ldr	r1, [pc, #560]	; (8001980 <HAL_RCC_ClockConfig+0x260>)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	4313      	orrs	r3, r2
 8001754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001756:	4b8a      	ldr	r3, [pc, #552]	; (8001980 <HAL_RCC_ClockConfig+0x260>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d001      	beq.n	8001768 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e106      	b.n	8001976 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	2b00      	cmp	r3, #0
 8001772:	d073      	beq.n	800185c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b03      	cmp	r3, #3
 800177a:	d129      	bne.n	80017d0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800177c:	4b81      	ldr	r3, [pc, #516]	; (8001984 <HAL_RCC_ClockConfig+0x264>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0f4      	b.n	8001976 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800178c:	f000 f966 	bl	8001a5c <RCC_GetSysClockFreqFromPLLSource>
 8001790:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	4a7c      	ldr	r2, [pc, #496]	; (8001988 <HAL_RCC_ClockConfig+0x268>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d93f      	bls.n	800181a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800179a:	4b7a      	ldr	r3, [pc, #488]	; (8001984 <HAL_RCC_ClockConfig+0x264>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d009      	beq.n	80017ba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d033      	beq.n	800181a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d12f      	bne.n	800181a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80017ba:	4b72      	ldr	r3, [pc, #456]	; (8001984 <HAL_RCC_ClockConfig+0x264>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017c2:	4a70      	ldr	r2, [pc, #448]	; (8001984 <HAL_RCC_ClockConfig+0x264>)
 80017c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80017ca:	2380      	movs	r3, #128	; 0x80
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	e024      	b.n	800181a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d107      	bne.n	80017e8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017d8:	4b6a      	ldr	r3, [pc, #424]	; (8001984 <HAL_RCC_ClockConfig+0x264>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d109      	bne.n	80017f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0c6      	b.n	8001976 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017e8:	4b66      	ldr	r3, [pc, #408]	; (8001984 <HAL_RCC_ClockConfig+0x264>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e0be      	b.n	8001976 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80017f8:	f000 f8ce 	bl	8001998 <HAL_RCC_GetSysClockFreq>
 80017fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	4a61      	ldr	r2, [pc, #388]	; (8001988 <HAL_RCC_ClockConfig+0x268>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d909      	bls.n	800181a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001806:	4b5f      	ldr	r3, [pc, #380]	; (8001984 <HAL_RCC_ClockConfig+0x264>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800180e:	4a5d      	ldr	r2, [pc, #372]	; (8001984 <HAL_RCC_ClockConfig+0x264>)
 8001810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001814:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800181a:	4b5a      	ldr	r3, [pc, #360]	; (8001984 <HAL_RCC_ClockConfig+0x264>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f023 0203 	bic.w	r2, r3, #3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	4957      	ldr	r1, [pc, #348]	; (8001984 <HAL_RCC_ClockConfig+0x264>)
 8001828:	4313      	orrs	r3, r2
 800182a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800182c:	f7fe ffba 	bl	80007a4 <HAL_GetTick>
 8001830:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001832:	e00a      	b.n	800184a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001834:	f7fe ffb6 	bl	80007a4 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001842:	4293      	cmp	r3, r2
 8001844:	d901      	bls.n	800184a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e095      	b.n	8001976 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184a:	4b4e      	ldr	r3, [pc, #312]	; (8001984 <HAL_RCC_ClockConfig+0x264>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 020c 	and.w	r2, r3, #12
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	429a      	cmp	r2, r3
 800185a:	d1eb      	bne.n	8001834 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d023      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	d005      	beq.n	8001880 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001874:	4b43      	ldr	r3, [pc, #268]	; (8001984 <HAL_RCC_ClockConfig+0x264>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	4a42      	ldr	r2, [pc, #264]	; (8001984 <HAL_RCC_ClockConfig+0x264>)
 800187a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800187e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0308 	and.w	r3, r3, #8
 8001888:	2b00      	cmp	r3, #0
 800188a:	d007      	beq.n	800189c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800188c:	4b3d      	ldr	r3, [pc, #244]	; (8001984 <HAL_RCC_ClockConfig+0x264>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001894:	4a3b      	ldr	r2, [pc, #236]	; (8001984 <HAL_RCC_ClockConfig+0x264>)
 8001896:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800189a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800189c:	4b39      	ldr	r3, [pc, #228]	; (8001984 <HAL_RCC_ClockConfig+0x264>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	4936      	ldr	r1, [pc, #216]	; (8001984 <HAL_RCC_ClockConfig+0x264>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	608b      	str	r3, [r1, #8]
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	2b80      	cmp	r3, #128	; 0x80
 80018b4:	d105      	bne.n	80018c2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80018b6:	4b33      	ldr	r3, [pc, #204]	; (8001984 <HAL_RCC_ClockConfig+0x264>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	4a32      	ldr	r2, [pc, #200]	; (8001984 <HAL_RCC_ClockConfig+0x264>)
 80018bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018c0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018c2:	4b2f      	ldr	r3, [pc, #188]	; (8001980 <HAL_RCC_ClockConfig+0x260>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d21d      	bcs.n	800190c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d0:	4b2b      	ldr	r3, [pc, #172]	; (8001980 <HAL_RCC_ClockConfig+0x260>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f023 020f 	bic.w	r2, r3, #15
 80018d8:	4929      	ldr	r1, [pc, #164]	; (8001980 <HAL_RCC_ClockConfig+0x260>)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	4313      	orrs	r3, r2
 80018de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018e0:	f7fe ff60 	bl	80007a4 <HAL_GetTick>
 80018e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e6:	e00a      	b.n	80018fe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e8:	f7fe ff5c 	bl	80007a4 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e03b      	b.n	8001976 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fe:	4b20      	ldr	r3, [pc, #128]	; (8001980 <HAL_RCC_ClockConfig+0x260>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	429a      	cmp	r2, r3
 800190a:	d1ed      	bne.n	80018e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	2b00      	cmp	r3, #0
 8001916:	d008      	beq.n	800192a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001918:	4b1a      	ldr	r3, [pc, #104]	; (8001984 <HAL_RCC_ClockConfig+0x264>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	4917      	ldr	r1, [pc, #92]	; (8001984 <HAL_RCC_ClockConfig+0x264>)
 8001926:	4313      	orrs	r3, r2
 8001928:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	2b00      	cmp	r3, #0
 8001934:	d009      	beq.n	800194a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001936:	4b13      	ldr	r3, [pc, #76]	; (8001984 <HAL_RCC_ClockConfig+0x264>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	490f      	ldr	r1, [pc, #60]	; (8001984 <HAL_RCC_ClockConfig+0x264>)
 8001946:	4313      	orrs	r3, r2
 8001948:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800194a:	f000 f825 	bl	8001998 <HAL_RCC_GetSysClockFreq>
 800194e:	4602      	mov	r2, r0
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <HAL_RCC_ClockConfig+0x264>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	091b      	lsrs	r3, r3, #4
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	490c      	ldr	r1, [pc, #48]	; (800198c <HAL_RCC_ClockConfig+0x26c>)
 800195c:	5ccb      	ldrb	r3, [r1, r3]
 800195e:	f003 031f 	and.w	r3, r3, #31
 8001962:	fa22 f303 	lsr.w	r3, r2, r3
 8001966:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <HAL_RCC_ClockConfig+0x270>)
 8001968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800196a:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <HAL_RCC_ClockConfig+0x274>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fecc 	bl	800070c <HAL_InitTick>
 8001974:	4603      	mov	r3, r0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40022000 	.word	0x40022000
 8001984:	40021000 	.word	0x40021000
 8001988:	04c4b400 	.word	0x04c4b400
 800198c:	08002350 	.word	0x08002350
 8001990:	20000000 	.word	0x20000000
 8001994:	20000004 	.word	0x20000004

08001998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001998:	b480      	push	{r7}
 800199a:	b087      	sub	sp, #28
 800199c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800199e:	4b2c      	ldr	r3, [pc, #176]	; (8001a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d102      	bne.n	80019b0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019aa:	4b2a      	ldr	r3, [pc, #168]	; (8001a54 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	e047      	b.n	8001a40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80019b0:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 030c 	and.w	r3, r3, #12
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	d102      	bne.n	80019c2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019bc:	4b26      	ldr	r3, [pc, #152]	; (8001a58 <HAL_RCC_GetSysClockFreq+0xc0>)
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	e03e      	b.n	8001a40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80019c2:	4b23      	ldr	r3, [pc, #140]	; (8001a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 030c 	and.w	r3, r3, #12
 80019ca:	2b0c      	cmp	r3, #12
 80019cc:	d136      	bne.n	8001a3c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019ce:	4b20      	ldr	r3, [pc, #128]	; (8001a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019d8:	4b1d      	ldr	r3, [pc, #116]	; (8001a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	091b      	lsrs	r3, r3, #4
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	3301      	adds	r3, #1
 80019e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2b03      	cmp	r3, #3
 80019ea:	d10c      	bne.n	8001a06 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019ec:	4a1a      	ldr	r2, [pc, #104]	; (8001a58 <HAL_RCC_GetSysClockFreq+0xc0>)
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f4:	4a16      	ldr	r2, [pc, #88]	; (8001a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019f6:	68d2      	ldr	r2, [r2, #12]
 80019f8:	0a12      	lsrs	r2, r2, #8
 80019fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019fe:	fb02 f303 	mul.w	r3, r2, r3
 8001a02:	617b      	str	r3, [r7, #20]
      break;
 8001a04:	e00c      	b.n	8001a20 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a06:	4a13      	ldr	r2, [pc, #76]	; (8001a54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0e:	4a10      	ldr	r2, [pc, #64]	; (8001a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a10:	68d2      	ldr	r2, [r2, #12]
 8001a12:	0a12      	lsrs	r2, r2, #8
 8001a14:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a18:	fb02 f303 	mul.w	r3, r2, r3
 8001a1c:	617b      	str	r3, [r7, #20]
      break;
 8001a1e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a20:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	0e5b      	lsrs	r3, r3, #25
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	e001      	b.n	8001a40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a40:	693b      	ldr	r3, [r7, #16]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	371c      	adds	r7, #28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40021000 	.word	0x40021000
 8001a54:	00f42400 	.word	0x00f42400
 8001a58:	007a1200 	.word	0x007a1200

08001a5c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a62:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	091b      	lsrs	r3, r3, #4
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	3301      	adds	r3, #1
 8001a78:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	2b03      	cmp	r3, #3
 8001a7e:	d10c      	bne.n	8001a9a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a80:	4a17      	ldr	r2, [pc, #92]	; (8001ae0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a88:	4a14      	ldr	r2, [pc, #80]	; (8001adc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a8a:	68d2      	ldr	r2, [r2, #12]
 8001a8c:	0a12      	lsrs	r2, r2, #8
 8001a8e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a92:	fb02 f303 	mul.w	r3, r2, r3
 8001a96:	617b      	str	r3, [r7, #20]
    break;
 8001a98:	e00c      	b.n	8001ab4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a9a:	4a12      	ldr	r2, [pc, #72]	; (8001ae4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa2:	4a0e      	ldr	r2, [pc, #56]	; (8001adc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001aa4:	68d2      	ldr	r2, [r2, #12]
 8001aa6:	0a12      	lsrs	r2, r2, #8
 8001aa8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001aac:	fb02 f303 	mul.w	r3, r2, r3
 8001ab0:	617b      	str	r3, [r7, #20]
    break;
 8001ab2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ab4:	4b09      	ldr	r3, [pc, #36]	; (8001adc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	0e5b      	lsrs	r3, r3, #25
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	3301      	adds	r3, #1
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001acc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001ace:	687b      	ldr	r3, [r7, #4]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	371c      	adds	r7, #28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	007a1200 	.word	0x007a1200
 8001ae4:	00f42400 	.word	0x00f42400

08001ae8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001af0:	2300      	movs	r3, #0
 8001af2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001af4:	2300      	movs	r3, #0
 8001af6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 8098 	beq.w	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b06:	2300      	movs	r3, #0
 8001b08:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b0a:	4b43      	ldr	r3, [pc, #268]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10d      	bne.n	8001b32 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	4b40      	ldr	r3, [pc, #256]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1a:	4a3f      	ldr	r2, [pc, #252]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b20:	6593      	str	r3, [r2, #88]	; 0x58
 8001b22:	4b3d      	ldr	r3, [pc, #244]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b32:	4b3a      	ldr	r3, [pc, #232]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a39      	ldr	r2, [pc, #228]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b3e:	f7fe fe31 	bl	80007a4 <HAL_GetTick>
 8001b42:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b44:	e009      	b.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b46:	f7fe fe2d 	bl	80007a4 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d902      	bls.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	74fb      	strb	r3, [r7, #19]
        break;
 8001b58:	e005      	b.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b5a:	4b30      	ldr	r3, [pc, #192]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0ef      	beq.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001b66:	7cfb      	ldrb	r3, [r7, #19]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d159      	bne.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001b6c:	4b2a      	ldr	r3, [pc, #168]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b76:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d01e      	beq.n	8001bbc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d019      	beq.n	8001bbc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001b88:	4b23      	ldr	r3, [pc, #140]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001b94:	4b20      	ldr	r3, [pc, #128]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b9a:	4a1f      	ldr	r2, [pc, #124]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ba4:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001baa:	4a1b      	ldr	r2, [pc, #108]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001bac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001bb4:	4a18      	ldr	r2, [pc, #96]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d016      	beq.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc6:	f7fe fded 	bl	80007a4 <HAL_GetTick>
 8001bca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bcc:	e00b      	b.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bce:	f7fe fde9 	bl	80007a4 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d902      	bls.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	74fb      	strb	r3, [r7, #19]
            break;
 8001be4:	e006      	b.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001be6:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0ec      	beq.n	8001bce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001bf4:	7cfb      	ldrb	r3, [r7, #19]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10b      	bne.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bfa:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c08:	4903      	ldr	r1, [pc, #12]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001c10:	e008      	b.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001c12:	7cfb      	ldrb	r3, [r7, #19]
 8001c14:	74bb      	strb	r3, [r7, #18]
 8001c16:	e005      	b.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c20:	7cfb      	ldrb	r3, [r7, #19]
 8001c22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c24:	7c7b      	ldrb	r3, [r7, #17]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d105      	bne.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c2a:	4ba7      	ldr	r3, [pc, #668]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2e:	4aa6      	ldr	r2, [pc, #664]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c34:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00a      	beq.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c42:	4ba1      	ldr	r3, [pc, #644]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c48:	f023 0203 	bic.w	r2, r3, #3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	499d      	ldr	r1, [pc, #628]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00a      	beq.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c64:	4b98      	ldr	r3, [pc, #608]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c6a:	f023 020c 	bic.w	r2, r3, #12
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	4995      	ldr	r1, [pc, #596]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00a      	beq.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001c86:	4b90      	ldr	r3, [pc, #576]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	498c      	ldr	r1, [pc, #560]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00a      	beq.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001ca8:	4b87      	ldr	r3, [pc, #540]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	4984      	ldr	r1, [pc, #528]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0310 	and.w	r3, r3, #16
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00a      	beq.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001cca:	4b7f      	ldr	r3, [pc, #508]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	497b      	ldr	r1, [pc, #492]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0320 	and.w	r3, r3, #32
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00a      	beq.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001cec:	4b76      	ldr	r3, [pc, #472]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	4973      	ldr	r1, [pc, #460]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00a      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d0e:	4b6e      	ldr	r3, [pc, #440]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69db      	ldr	r3, [r3, #28]
 8001d1c:	496a      	ldr	r1, [pc, #424]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00a      	beq.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d30:	4b65      	ldr	r3, [pc, #404]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d36:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	4962      	ldr	r1, [pc, #392]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00a      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001d52:	4b5d      	ldr	r3, [pc, #372]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	4959      	ldr	r1, [pc, #356]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00a      	beq.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d74:	4b54      	ldr	r3, [pc, #336]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d7a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d82:	4951      	ldr	r1, [pc, #324]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d015      	beq.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d96:	4b4c      	ldr	r3, [pc, #304]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da4:	4948      	ldr	r1, [pc, #288]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001db4:	d105      	bne.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001db6:	4b44      	ldr	r3, [pc, #272]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	4a43      	ldr	r2, [pc, #268]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dc0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d015      	beq.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001dce:	4b3e      	ldr	r3, [pc, #248]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dd4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ddc:	493a      	ldr	r1, [pc, #232]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dec:	d105      	bne.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001dee:	4b36      	ldr	r3, [pc, #216]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	4a35      	ldr	r2, [pc, #212]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001df4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001df8:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d015      	beq.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001e06:	4b30      	ldr	r3, [pc, #192]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e0c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e14:	492c      	ldr	r1, [pc, #176]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e24:	d105      	bne.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e26:	4b28      	ldr	r3, [pc, #160]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	4a27      	ldr	r2, [pc, #156]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e30:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d015      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e3e:	4b22      	ldr	r3, [pc, #136]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e44:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e4c:	491e      	ldr	r1, [pc, #120]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e5c:	d105      	bne.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	4a19      	ldr	r2, [pc, #100]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e68:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d015      	beq.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001e76:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e7c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e84:	4910      	ldr	r1, [pc, #64]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e94:	d105      	bne.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e96:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	4a0b      	ldr	r2, [pc, #44]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ea0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d018      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	4902      	ldr	r1, [pc, #8]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	e001      	b.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ed2:	d105      	bne.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001ed4:	4b21      	ldr	r3, [pc, #132]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	4a20      	ldr	r2, [pc, #128]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ede:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d015      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8001eec:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	4918      	ldr	r1, [pc, #96]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f0a:	d105      	bne.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001f0c:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	4a12      	ldr	r2, [pc, #72]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f16:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d015      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8001f24:	4b0d      	ldr	r3, [pc, #52]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f32:	490a      	ldr	r1, [pc, #40]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f42:	d105      	bne.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f44:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	4a04      	ldr	r2, [pc, #16]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001f4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f4e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8001f50:	7cbb      	ldrb	r3, [r7, #18]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40021000 	.word	0x40021000

08001f60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e049      	b.n	8002006 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d106      	bne.n	8001f8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7fe fb58 	bl	800063c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	f000 f836 	bl	8002010 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
	...

08002010 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a42      	ldr	r2, [pc, #264]	; (800212c <TIM_Base_SetConfig+0x11c>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d013      	beq.n	8002050 <TIM_Base_SetConfig+0x40>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800202e:	d00f      	beq.n	8002050 <TIM_Base_SetConfig+0x40>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a3f      	ldr	r2, [pc, #252]	; (8002130 <TIM_Base_SetConfig+0x120>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d00b      	beq.n	8002050 <TIM_Base_SetConfig+0x40>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a3e      	ldr	r2, [pc, #248]	; (8002134 <TIM_Base_SetConfig+0x124>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d007      	beq.n	8002050 <TIM_Base_SetConfig+0x40>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a3d      	ldr	r2, [pc, #244]	; (8002138 <TIM_Base_SetConfig+0x128>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d003      	beq.n	8002050 <TIM_Base_SetConfig+0x40>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a3c      	ldr	r2, [pc, #240]	; (800213c <TIM_Base_SetConfig+0x12c>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d108      	bne.n	8002062 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	4313      	orrs	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a31      	ldr	r2, [pc, #196]	; (800212c <TIM_Base_SetConfig+0x11c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d01f      	beq.n	80020aa <TIM_Base_SetConfig+0x9a>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002070:	d01b      	beq.n	80020aa <TIM_Base_SetConfig+0x9a>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a2e      	ldr	r2, [pc, #184]	; (8002130 <TIM_Base_SetConfig+0x120>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d017      	beq.n	80020aa <TIM_Base_SetConfig+0x9a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a2d      	ldr	r2, [pc, #180]	; (8002134 <TIM_Base_SetConfig+0x124>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d013      	beq.n	80020aa <TIM_Base_SetConfig+0x9a>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a2c      	ldr	r2, [pc, #176]	; (8002138 <TIM_Base_SetConfig+0x128>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d00f      	beq.n	80020aa <TIM_Base_SetConfig+0x9a>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a2c      	ldr	r2, [pc, #176]	; (8002140 <TIM_Base_SetConfig+0x130>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d00b      	beq.n	80020aa <TIM_Base_SetConfig+0x9a>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a2b      	ldr	r2, [pc, #172]	; (8002144 <TIM_Base_SetConfig+0x134>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d007      	beq.n	80020aa <TIM_Base_SetConfig+0x9a>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a2a      	ldr	r2, [pc, #168]	; (8002148 <TIM_Base_SetConfig+0x138>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d003      	beq.n	80020aa <TIM_Base_SetConfig+0x9a>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a25      	ldr	r2, [pc, #148]	; (800213c <TIM_Base_SetConfig+0x12c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d108      	bne.n	80020bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a12      	ldr	r2, [pc, #72]	; (800212c <TIM_Base_SetConfig+0x11c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d013      	beq.n	8002110 <TIM_Base_SetConfig+0x100>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a13      	ldr	r2, [pc, #76]	; (8002138 <TIM_Base_SetConfig+0x128>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d00f      	beq.n	8002110 <TIM_Base_SetConfig+0x100>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a13      	ldr	r2, [pc, #76]	; (8002140 <TIM_Base_SetConfig+0x130>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d00b      	beq.n	8002110 <TIM_Base_SetConfig+0x100>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a12      	ldr	r2, [pc, #72]	; (8002144 <TIM_Base_SetConfig+0x134>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d007      	beq.n	8002110 <TIM_Base_SetConfig+0x100>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a11      	ldr	r2, [pc, #68]	; (8002148 <TIM_Base_SetConfig+0x138>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d003      	beq.n	8002110 <TIM_Base_SetConfig+0x100>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a0c      	ldr	r2, [pc, #48]	; (800213c <TIM_Base_SetConfig+0x12c>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d103      	bne.n	8002118 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	691a      	ldr	r2, [r3, #16]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	615a      	str	r2, [r3, #20]
}
 800211e:	bf00      	nop
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40012c00 	.word	0x40012c00
 8002130:	40000400 	.word	0x40000400
 8002134:	40000800 	.word	0x40000800
 8002138:	40013400 	.word	0x40013400
 800213c:	40015000 	.word	0x40015000
 8002140:	40014000 	.word	0x40014000
 8002144:	40014400 	.word	0x40014400
 8002148:	40014800 	.word	0x40014800

0800214c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800215c:	2b01      	cmp	r3, #1
 800215e:	d101      	bne.n	8002164 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002160:	2302      	movs	r3, #2
 8002162:	e06f      	b.n	8002244 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2202      	movs	r2, #2
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a31      	ldr	r2, [pc, #196]	; (8002250 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d009      	beq.n	80021a2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a30      	ldr	r2, [pc, #192]	; (8002254 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d004      	beq.n	80021a2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a2e      	ldr	r2, [pc, #184]	; (8002258 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d108      	bne.n	80021b4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80021a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80021ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a1e      	ldr	r2, [pc, #120]	; (8002250 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d01d      	beq.n	8002218 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e4:	d018      	beq.n	8002218 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a1c      	ldr	r2, [pc, #112]	; (800225c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d013      	beq.n	8002218 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a1a      	ldr	r2, [pc, #104]	; (8002260 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d00e      	beq.n	8002218 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a15      	ldr	r2, [pc, #84]	; (8002254 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d009      	beq.n	8002218 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a16      	ldr	r2, [pc, #88]	; (8002264 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d004      	beq.n	8002218 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a11      	ldr	r2, [pc, #68]	; (8002258 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d10c      	bne.n	8002232 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800221e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	4313      	orrs	r3, r2
 8002228:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	40012c00 	.word	0x40012c00
 8002254:	40013400 	.word	0x40013400
 8002258:	40015000 	.word	0x40015000
 800225c:	40000400 	.word	0x40000400
 8002260:	40000800 	.word	0x40000800
 8002264:	40014000 	.word	0x40014000

08002268 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002270:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8002274:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800227c:	b29a      	uxth	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	b29b      	uxth	r3, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	b29b      	uxth	r3, r3
 8002286:	4013      	ands	r3, r2
 8002288:	b29a      	uxth	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800229e:	b084      	sub	sp, #16
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	f107 0014 	add.w	r0, r7, #20
 80022ac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	b004      	add	sp, #16
 80022de:	4770      	bx	lr

080022e0 <memset>:
 80022e0:	4402      	add	r2, r0
 80022e2:	4603      	mov	r3, r0
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d100      	bne.n	80022ea <memset+0xa>
 80022e8:	4770      	bx	lr
 80022ea:	f803 1b01 	strb.w	r1, [r3], #1
 80022ee:	e7f9      	b.n	80022e4 <memset+0x4>

080022f0 <__libc_init_array>:
 80022f0:	b570      	push	{r4, r5, r6, lr}
 80022f2:	4d0d      	ldr	r5, [pc, #52]	; (8002328 <__libc_init_array+0x38>)
 80022f4:	4c0d      	ldr	r4, [pc, #52]	; (800232c <__libc_init_array+0x3c>)
 80022f6:	1b64      	subs	r4, r4, r5
 80022f8:	10a4      	asrs	r4, r4, #2
 80022fa:	2600      	movs	r6, #0
 80022fc:	42a6      	cmp	r6, r4
 80022fe:	d109      	bne.n	8002314 <__libc_init_array+0x24>
 8002300:	4d0b      	ldr	r5, [pc, #44]	; (8002330 <__libc_init_array+0x40>)
 8002302:	4c0c      	ldr	r4, [pc, #48]	; (8002334 <__libc_init_array+0x44>)
 8002304:	f000 f818 	bl	8002338 <_init>
 8002308:	1b64      	subs	r4, r4, r5
 800230a:	10a4      	asrs	r4, r4, #2
 800230c:	2600      	movs	r6, #0
 800230e:	42a6      	cmp	r6, r4
 8002310:	d105      	bne.n	800231e <__libc_init_array+0x2e>
 8002312:	bd70      	pop	{r4, r5, r6, pc}
 8002314:	f855 3b04 	ldr.w	r3, [r5], #4
 8002318:	4798      	blx	r3
 800231a:	3601      	adds	r6, #1
 800231c:	e7ee      	b.n	80022fc <__libc_init_array+0xc>
 800231e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002322:	4798      	blx	r3
 8002324:	3601      	adds	r6, #1
 8002326:	e7f2      	b.n	800230e <__libc_init_array+0x1e>
 8002328:	08002360 	.word	0x08002360
 800232c:	08002360 	.word	0x08002360
 8002330:	08002360 	.word	0x08002360
 8002334:	08002364 	.word	0x08002364

08002338 <_init>:
 8002338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800233a:	bf00      	nop
 800233c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800233e:	bc08      	pop	{r3}
 8002340:	469e      	mov	lr, r3
 8002342:	4770      	bx	lr

08002344 <_fini>:
 8002344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002346:	bf00      	nop
 8002348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800234a:	bc08      	pop	{r3}
 800234c:	469e      	mov	lr, r3
 800234e:	4770      	bx	lr
